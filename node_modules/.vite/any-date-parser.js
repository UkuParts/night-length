import {
  __commonJS,
  __spreadProps,
  __spreadValues
} from "./chunk-B7LZDY4N.js";

// node_modules/any-date-parser/src/data/normalizeLocale.js
var require_normalizeLocale = __commonJS({
  "node_modules/any-date-parser/src/data/normalizeLocale.js"(exports, module) {
    function normalizeLocale(name) {
      name = name.replace(/_/g, "-");
      name = name.replace(/[.:][\w-]*$/, "");
      try {
        return new Intl.Locale(name).baseName;
      } catch (e) {
        return "en-US";
      }
    }
    module.exports = normalizeLocale;
  }
});

// node_modules/any-date-parser/src/data/defaultLocale.js
var require_defaultLocale = __commonJS({
  "node_modules/any-date-parser/src/data/defaultLocale.js"(exports, module) {
    var normalizeLocale = require_normalizeLocale();
    var defaultLocale;
    if (typeof navigator !== "undefined") {
      const nav = navigator;
      defaultLocale = Array.isArray(nav.languages) ? nav.languages[0] : nav.language;
    } else if (typeof process !== "undefined") {
      const env = process.env;
      defaultLocale = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;
    }
    if (!defaultLocale) {
      defaultLocale = "en-US";
    }
    module.exports = normalizeLocale(defaultLocale);
  }
});

// node_modules/any-date-parser/src/data/twoDigitYears.js
var require_twoDigitYears = __commonJS({
  "node_modules/any-date-parser/src/data/twoDigitYears.js"(exports, module) {
    var twoDigitYears = {};
    for (let i = 1; i < 100; i++) {
      const key = (i < 9 ? "0" : "") + i;
      twoDigitYears[key] = i + (i > 51 ? 1900 : 2e3);
    }
    module.exports = twoDigitYears;
  }
});

// node_modules/any-date-parser/src/data/timezoneNames.js
var require_timezoneNames = __commonJS({
  "node_modules/any-date-parser/src/data/timezoneNames.js"(exports, module) {
    var timezoneNames = {
      "Eastern Daylight Time": -240,
      "Eastern Standard Time": -300,
      "Central Daylight Time": -300,
      "Central Standard Time": -360,
      "Mountain Daylight Time": -360,
      "Mountain Standard Time": -420,
      "Pacific Daylight Time": -420,
      "Pacific Standard Time": -480,
      ACDT: 630,
      ACST: 570,
      ACT: 480,
      ADT: -180,
      AEDT: 660,
      AEST: 600,
      AFT: 270,
      AKDT: -480,
      AKST: -540,
      AMST: -180,
      AMT: -240,
      ART: -180,
      AST: 180,
      AWDT: 540,
      AWST: 480,
      AZOST: -60,
      AZT: 240,
      BDT: 360,
      BIOT: 360,
      BIT: -720,
      BOT: -240,
      BRST: -120,
      BRT: -180,
      BTT: 360,
      CAT: 120,
      CCT: 390,
      CDT: -300,
      CEDT: 120,
      CEST: 120,
      CET: 60,
      CHADT: 825,
      CHAST: 765,
      CHOT: 480,
      ChST: 600,
      CHUT: 600,
      CIST: -480,
      CIT: 480,
      CKT: -600,
      CLST: -180,
      CLT: -240,
      COST: -240,
      COT: -300,
      CST: -360,
      CT: 480,
      CVT: -60,
      CXT: 420,
      DAVT: 420,
      DDUT: 600,
      DFT: 60,
      EASST: -300,
      EAST: -360,
      EAT: 180,
      ECT: -300,
      EDT: -240,
      EEDT: 180,
      EEST: 180,
      EET: 120,
      EGST: 0,
      EGT: -60,
      EIT: 540,
      EST: -300,
      FET: 180,
      FJT: 720,
      FKST: -180,
      FKT: -240,
      FNT: -120,
      GALT: -360,
      GAMT: -540,
      GET: 240,
      GFT: -180,
      GILT: 720,
      GIT: -540,
      GMT: 0,
      GST: -120,
      GYT: -240,
      HADT: -540,
      HAEC: 120,
      HAST: -600,
      HKT: 480,
      HMT: 300,
      HOVT: 420,
      HST: -600,
      IBST: 0,
      ICT: 420,
      IDT: 180,
      IOT: 180,
      IRDT: 270,
      IRKT: 480,
      IRST: 210,
      IST: 120,
      JST: 540,
      KGT: 360,
      KOST: 660,
      KRAT: 420,
      KST: 540,
      LHST: 630,
      LINT: 840,
      MAGT: 720,
      MART: -510,
      MAWT: 300,
      MDT: -360,
      MET: 60,
      MEST: 120,
      MHT: 720,
      MIST: 660,
      MIT: -510,
      MMT: 390,
      MSK: 180,
      MST: -420,
      MUT: 240,
      MVT: 300,
      MYT: 480,
      NCT: 660,
      NDT: -90,
      NFT: 660,
      NPT: 345,
      NST: -150,
      NT: -150,
      NUT: -660,
      NZDT: 780,
      NZST: 720,
      OMST: 360,
      ORAT: 300,
      PDT: -420,
      PET: -300,
      PETT: 720,
      PGT: 600,
      PHOT: 780,
      PKT: 300,
      PMDT: -120,
      PMST: -180,
      PONT: 660,
      PST: -480,
      PYST: -180,
      PYT: -240,
      RET: 240,
      ROTT: -180,
      SAKT: 660,
      SAMT: 240,
      SAST: 120,
      SBT: 660,
      SCT: 240,
      SGT: 480,
      SLST: 330,
      SRET: 660,
      SRT: -180,
      SST: 480,
      SYOT: 180,
      TAHT: -600,
      THA: 420,
      TFT: 300,
      TJT: 300,
      TKT: 780,
      TLT: 540,
      TMT: 300,
      TOT: 780,
      TVT: 720,
      UCT: 0,
      ULAT: 480,
      USZ1: 120,
      UTC: 0,
      UYST: -120,
      UYT: -180,
      UZT: 300,
      VET: -240,
      VLAT: 600,
      VOLT: 240,
      VOST: 360,
      VUT: 660,
      WAKT: 720,
      WAST: 120,
      WAT: 60,
      WEDT: 60,
      WEST: 60,
      WET: 0,
      WIT: 420,
      WST: 480,
      YAKT: 540,
      YEKT: 300,
      Z: 0
    };
    module.exports = timezoneNames;
  }
});

// node_modules/any-date-parser/src/data/baseLookups.js
var require_baseLookups = __commonJS({
  "node_modules/any-date-parser/src/data/baseLookups.js"(exports, module) {
    var twoDigitYears = require_twoDigitYears();
    var timezoneNames = require_timezoneNames();
    var baseLookups = {
      zone: timezoneNames,
      year: twoDigitYears,
      meridiem: { am: 0, pm: 12, "a.m.": 0, "p.m.": 12 },
      month: {
        january: 1,
        jan: 1,
        february: 2,
        feb: 2,
        march: 3,
        mar: 3,
        april: 4,
        apr: 4,
        may: 5,
        june: 6,
        jun: 6,
        july: 7,
        jul: 7,
        august: 8,
        aug: 8,
        september: 9,
        sep: 9,
        october: 10,
        oct: 10,
        november: 11,
        nov: 11,
        december: 12,
        dec: 12
      },
      dayname: {
        sunday: 0,
        sun: 0,
        monday: 1,
        mon: 1,
        tuesday: 2,
        tue: 2,
        wednesday: 3,
        wed: 3,
        thursday: 4,
        thu: 4,
        friday: 5,
        fri: 5,
        saturday: 6,
        sat: 6
      },
      digit: {}
    };
    module.exports = baseLookups;
  }
});

// node_modules/any-date-parser/src/data/templates.js
var require_templates = __commonJS({
  "node_modules/any-date-parser/src/data/templates.js"(exports, module) {
    var timezoneNames = require_timezoneNames();
    var latn = {
      MONTHNAME: "january|february|march|april|may|june|july|august|september|october|november|december|jan\\.?|feb\\.?|mar\\.?|apr\\.?|may\\.?|jun\\.?|jul\\.?|aug\\.?|sep\\.?|oct\\.?|nov\\.?|dec\\.?",
      DAYNAME: "sunday|monday|tuesday|wednesday|thursday|friday|saturday|sun\\.?|mon\\.?|tue\\.?|wed\\.?|thu\\.?|fri\\.?|sat\\.?",
      ZONE: "\\(?(" + Object.keys(timezoneNames).join("|") + ")\\)?",
      MERIDIEM: "[ap]\\.?m?\\.?",
      ORDINAL: "st|nd|rd|th|\\.",
      YEAR: "[1-9]\\d{3}|\\d{2}",
      MONTH: "1[0-2]|0?[1-9]",
      MONTH2: "1[0-2]|0[1-9]",
      DAY: "3[01]|[12]\\d|0?[1-9]",
      DAY2: "3[01]|[12]\\d|0[1-9]",
      OFFSET: "[+-][01]?\\d?\\:?(?:[0-5]\\d)?",
      H24: "[01]\\d|2[0-3]",
      H12: "0?[1-9]|1[012]",
      MIN: "[0-5]\\d",
      SEC: "[0-5]\\d|60",
      MS: "\\d{9}|\\d{6}|\\d{1,3}",
      SPACE: "[\\s,-]"
    };
    var other = __spreadProps(__spreadValues({}, latn), {
      YEAR: "*{4}|*{2}",
      MONTH: "*{1,2}",
      MONTH2: "*{2}",
      DAY: "*{1,2}",
      DAY2: "*{2}",
      OFFSET: "[+-]*{1,2}\\:?*{0,2}",
      H24: "*{2}",
      H12: "*{1,2}",
      MIN: "*{2}",
      SEC: "*{2}",
      MS: "*{9}|*{6}|*{3}"
    });
    module.exports = { latn, other };
  }
});

// node_modules/any-date-parser/src/data/numberingSystems.js
var require_numberingSystems = __commonJS({
  "node_modules/any-date-parser/src/data/numberingSystems.js"(exports, module) {
    var startCodes = {
      arab: 1632,
      arabext: 1776,
      bali: 6992,
      beng: 2534,
      deva: 2406,
      fullwide: 65296,
      gujr: 2790,
      khmr: 6112,
      knda: 3302,
      laoo: 3792,
      limb: 6470,
      mlym: 3430,
      mong: 6160,
      mymr: 4160,
      orya: 2918,
      tamldec: 3046,
      telu: 3174,
      thai: 3664,
      tibt: 3872
    };
    var chineseGroup = "[\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\u3007\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D\u4E03\u516B\u4E5D\\d]";
    var defaultLookup = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      "\uFF10": 0,
      "\uFF11": 1,
      "\uFF12": 2,
      "\uFF13": 3,
      "\uFF14": 4,
      "\uFF15": 5,
      "\uFF16": 6,
      "\uFF17": 7,
      "\uFF18": 8,
      "\uFF19": 9,
      "\u3007": 0,
      \u4E00: 1,
      \u4E8C: 2,
      \u4E09: 3,
      \u56DB: 4,
      \u4E94: 5,
      \u516D: 6,
      \u4E03: 7,
      \u516B: 8,
      \u4E5D: 9
    };
    var cache = {};
    function buildDigits(nsName) {
      if (cache[nsName]) {
        return cache[nsName];
      }
      if (nsName === "fullwide" || nsName === "hanidec") {
        return { group: chineseGroup, lookup: __spreadValues({}, defaultLookup) };
      }
      const startCode = startCodes[nsName];
      if (!startCode) {
        return { group: "\\d", lookup: __spreadValues({}, defaultLookup) };
      }
      const start = String.fromCharCode(startCode);
      const end = String.fromCharCode(startCode + 9);
      const lookup = {};
      for (let i = 0; i < 10; i++) {
        lookup[String.fromCharCode(startCode + i)] = i;
      }
      cache[nsName] = {
        group: `[${start}-${end}]`,
        lookup
      };
      return cache[nsName];
    }
    module.exports = { chineseGroup, defaultLookup, startCodes, buildDigits };
  }
});

// node_modules/any-date-parser/src/data/units.js
var require_units = __commonJS({
  "node_modules/any-date-parser/src/data/units.js"(exports, module) {
    var units = [
      "year",
      "month",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    module.exports = units;
  }
});

// node_modules/any-date-parser/src/LocaleHelper/LocaleHelper.js
var require_LocaleHelper = __commonJS({
  "node_modules/any-date-parser/src/LocaleHelper/LocaleHelper.js"(exports, module) {
    var baseLookups = require_baseLookups();
    var { latn, other } = require_templates();
    var { buildDigits } = require_numberingSystems();
    var defaultLocale = require_defaultLocale();
    var units = require_units();
    var cache = {};
    var LocaleHelper = class {
      static factory(locale = defaultLocale) {
        if (!cache[locale.toLowerCase()]) {
          cache[locale.toLowerCase()] = new LocaleHelper(locale);
        }
        return cache[locale.toLowerCase()];
      }
      constructor(locale = defaultLocale) {
        this.locale = locale;
        this.lookups = __spreadValues({}, baseLookups);
        this.vars = __spreadValues({}, latn);
        const fmt = new Intl.NumberFormat(this.locale);
        this.numberingSystem = fmt.resolvedOptions().numberingSystem;
        this.build();
      }
      toInt(digitString) {
        if (typeof digitString === "number") {
          return digitString;
        }
        if (this.numberingSystem === "latn") {
          return parseInt(digitString, 10);
        }
        let latn2 = "";
        for (let i = 0; i < digitString.length; i++) {
          latn2 += String(this.lookups.digit[digitString[i]]);
        }
        return parseInt(latn2, 10);
      }
      build() {
        if (this.numberingSystem !== "latn") {
          this.buildNumbers();
        }
        if (!/^en/i.test(this.locale)) {
          this.buildMonthNames();
          this.buildDaynames();
          this.buildMeridiems();
        }
      }
      buildNumbers() {
        const nsName = this.numberingSystem;
        const { group, lookup } = buildDigits(nsName);
        this.lookups.digit = lookup;
        for (const name in other) {
          if (!other.hasOwnProperty(name)) {
            continue;
          }
          this.vars[name] = other[name].replace(/\*/g, group);
        }
      }
      buildMonthNames() {
        const vars = {};
        const lookup = {};
        if (/^fi/i.test(this.locale)) {
          const months = "tammi|helmi|maalis|huhti|touko|kes\xE4|hein\xE4|elo|syys|loka|marras|joulu";
          months.split("|").forEach((month, idx) => {
            ["", "k", "kuu", "kuuta"].forEach((suffix, i) => {
              const maybePeriod = i < 2 ? "\\.?" : "";
              vars[month + suffix + maybePeriod] = true;
              lookup[month + suffix] = idx + 1;
            });
          });
        } else {
          const dates = [];
          const findMonth = (item) => item.type === "month";
          for (let monthIdx = 0; monthIdx < 12; monthIdx++) {
            dates.push(new Date(2017, monthIdx, 1));
          }
          const dateStyles = ["full", "long", "medium"];
          for (const dateStyle of dateStyles) {
            const format2 = Intl.DateTimeFormat(this.locale, { dateStyle });
            for (let monthIdx = 0; monthIdx < 12; monthIdx++) {
              const parts = format2.formatToParts(dates[monthIdx]);
              let text = parts.find(findMonth).value.toLowerCase();
              if (/^ko/i.test(this.locale)) {
                text += "\uC6D4";
              }
              if (dateStyle === "medium") {
                if (/^ar|zh/i.test(this.locale)) {
                  return;
                }
                text = text.replace(/\.$/, "");
                vars[`${text}\\.?`] = true;
              } else {
                vars[text] = true;
              }
              lookup[text] = monthIdx + 1;
            }
          }
          const format = Intl.DateTimeFormat(this.locale, { month: "short" });
          for (let monthIdx = 0; monthIdx < 12; monthIdx++) {
            const parts = format.formatToParts(dates[monthIdx]);
            let text = parts.find(findMonth).value.toLowerCase();
            text = text.replace(/\.$/, "");
            vars[`${text}\\.?`] = true;
            lookup[text] = monthIdx + 1;
          }
        }
        this.vars.MONTHNAME = Object.keys(vars).join("|");
        this.lookups.month = lookup;
      }
      buildDaynames() {
        const dates = [];
        const findDay = (item) => item.type === "weekday";
        for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
          dates.push(new Date(2017, 0, dayIndex + 1));
        }
        const weekdays = ["long", "short"];
        const list = [];
        const lookup = {};
        for (const weekday of weekdays) {
          const format = Intl.DateTimeFormat(this.locale, { weekday });
          for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
            const parts = format.formatToParts(dates[dayIndex]);
            let text = parts.find(findDay).value.toLowerCase();
            if (weekday === "short") {
              text = text.replace(/\.$/, "");
              list.push(`${text}\\.?`);
            } else {
              list.push(text);
            }
            lookup[text] = dayIndex;
          }
        }
        this.vars.DAYNAME = list.join("|");
        this.lookups.dayname = lookup;
      }
      buildMeridiems() {
        const dates = [new Date(2017, 0, 1), new Date(2017, 0, 1, 23, 0, 0)];
        const findDayPeriod = (item) => item.type === "dayPeriod";
        const list = [];
        const lookup = {};
        const format = Intl.DateTimeFormat(this.locale, { timeStyle: "long" });
        for (let i = 0; i < 2; i++) {
          const parts = format.formatToParts(dates[i]);
          const dayPeriod = parts.find(findDayPeriod);
          if (!dayPeriod) {
            return;
          }
          const text = dayPeriod.value.toLowerCase();
          list.push(text);
          lookup[text] = i * 12;
        }
        this.vars.MERIDIEM = list.join("|");
        this.lookups.meridiem = lookup;
      }
      getObject(units2, matches) {
        const object = {};
        units2.forEach((unit, i) => {
          if (!unit) {
            return;
          }
          let match = matches[i + 1];
          match = match.toLowerCase();
          match = match.replace(/\.$/, "");
          if (unit === "offset") {
            object.offset = this.offsetToMinutes(match);
          } else if (this.lookups[unit]) {
            object[unit] = this.lookups[unit][match] || this.toInt(match);
          } else {
            object[unit] = this.toInt(match);
          }
        });
        return object;
      }
      castObject(object) {
        const casted = {};
        units.forEach((unit) => {
          if (unit in object) {
            casted[unit] = this.toInt(object[unit]);
          }
        });
        if (typeof object.offset === "string") {
          casted.offset = this.offsetToMinutes(object.offset);
        } else if (typeof object.offset === "number") {
          casted.offset = object.offset;
        }
        return casted;
      }
      offsetToMinutes(offsetString) {
        const captured = offsetString.match(/^([+-])(..?):?(..)?$/);
        if (captured) {
          const [, sign, hours, minutes] = captured;
          return (sign === "-" ? -1 : 1) * (this.toInt(hours) * 60 + this.toInt(minutes || 0));
        }
        return 0;
      }
      compile(template) {
        const regexString = template.replace(/_([A-Z0-9]+)_/g, ($0, $1) => {
          if (!this.vars[$1]) {
            throw new Error(`Template string contains invalid variable _${$1}_`);
          }
          return this.vars[$1];
        });
        return new RegExp(regexString, "i");
      }
    };
    module.exports = LocaleHelper;
  }
});

// node_modules/any-date-parser/src/Format/Format.js
var require_Format = __commonJS({
  "node_modules/any-date-parser/src/Format/Format.js"(exports, module) {
    var LocaleHelper = require_LocaleHelper();
    var defaultLocale = require_defaultLocale();
    var Format = class {
      constructor({
        template = null,
        matcher = null,
        units = null,
        handler = null,
        locales = null
      }) {
        if (!Array.isArray(units) && typeof handler !== "function") {
          throw new Error('new Format must receive a "units" array or "handler" function');
        }
        if (typeof template !== "string" && !(matcher instanceof RegExp)) {
          throw new Error('new Format must receive a "template" string or "matcher" RegExp');
        }
        this.template = template;
        this.units = units;
        this.matcher = matcher;
        this.handler = handler;
        this.locales = locales;
        this.regexByLocale = {};
      }
      getRegExp(locale = defaultLocale) {
        if (this.template) {
          if (!this.regexByLocale[locale]) {
            this.regexByLocale[locale] = LocaleHelper.factory(locale).compile(this.template);
          }
          return this.regexByLocale[locale];
        }
        return this.matcher;
      }
      getMatches(string, locale = defaultLocale) {
        return string.match(this.getRegExp(locale));
      }
      toDateTime(matches, locale = defaultLocale) {
        const locHelper = LocaleHelper.factory(locale);
        if (this.units) {
          return locHelper.getObject(this.units, matches);
        }
        const dt = this.handler(matches, locale);
        if (!dt || dt.invalid) {
          return dt;
        }
        return locHelper.castObject(dt);
      }
      attempt(string, locale = defaultLocale) {
        string = String(string).trim();
        const matches = this.getMatches(string, locale);
        if (matches) {
          const dt = this.toDateTime(matches, locale);
          if (dt && !dt.invalid) {
            return dt;
          }
        }
        return null;
      }
      now() {
        return new Date();
      }
    };
    module.exports = Format;
  }
});

// node_modules/any-date-parser/src/fromString/fromString.js
var require_fromString = __commonJS({
  "node_modules/any-date-parser/src/fromString/fromString.js"(exports, module) {
    function fromString(parser, defaultLocale) {
      return function fromStringFunction(string, locale = defaultLocale) {
        const parsed = parser.attempt(string, locale);
        if (parsed.invalid) {
          return parsed;
        }
        const date = new Date(2e3, 0, 1);
        if (typeof parsed.day === "number") {
          date.setUTCDate(parsed.day);
        }
        if (typeof parsed.year === "number") {
          date.setUTCFullYear(parsed.year);
        }
        if (typeof parsed.month === "number") {
          date.setUTCMonth(parsed.month - 1);
        }
        date.setUTCHours(parsed.hour || 0);
        date.setUTCMinutes(parsed.minute || 0);
        date.setUTCSeconds(parsed.second || 0);
        date.setUTCMilliseconds(parsed.millisecond || 0);
        if (typeof parsed.offset === "number") {
          return new Date(date - parsed.offset * 60 * 1e3);
        }
        return date;
      };
    }
    module.exports = fromString;
  }
});

// node_modules/any-date-parser/src/fromAny/fromAny.js
var require_fromAny = __commonJS({
  "node_modules/any-date-parser/src/fromAny/fromAny.js"(exports, module) {
    function fromAny(fromString) {
      return function fromAny2(any, locale) {
        if (any instanceof Date) {
          return any;
        }
        if (typeof any === "number") {
          return new Date(any);
        }
        return fromString(any, locale);
      };
    }
    module.exports = fromAny;
  }
});

// node_modules/any-date-parser/src/Parser/Parser.js
var require_Parser = __commonJS({
  "node_modules/any-date-parser/src/Parser/Parser.js"(exports, module) {
    var defaultLocale = require_defaultLocale();
    var Format = require_Format();
    var fromString = require_fromString();
    var fromAny = require_fromAny();
    var Parser = class {
      constructor() {
        this.formats = [];
      }
      addFormat(format) {
        this.formats.push(format);
        format.parser = this;
        return this;
      }
      addFormats(formats) {
        formats.forEach((format) => this.addFormat(format));
        return this;
      }
      removeFormat(format) {
        const idx = this.formats.indexOf(format);
        if (idx > -1) {
          const old = this.formats[idx];
          this.formats.splice(idx, 1);
          old.parser = null;
          return true;
        }
        return false;
      }
      attempt(date, locale = defaultLocale) {
        for (const format of this.formats) {
          if (Array.isArray(format.locales) && format.locales.length > 0 && !format.locales.includes(new Intl.Locale(locale).baseName)) {
            continue;
          }
          const dt = format.attempt(date, locale);
          if (dt) {
            return dt;
          }
        }
        let string = String(date).slice(0, 200);
        if (string === "") {
          string = "empty string";
        }
        return { invalid: `Unable to parse ${string}` };
      }
      exportAsFunction(locale = defaultLocale) {
        return fromString(this, locale);
      }
      exportAsFunctionAny(locale = defaultLocale) {
        return fromAny(fromString(this, locale));
      }
    };
    module.exports = Parser;
  }
});

// node_modules/any-date-parser/src/formats/atSeconds/atSeconds.js
var require_atSeconds = __commonJS({
  "node_modules/any-date-parser/src/formats/atSeconds/atSeconds.js"(exports, module) {
    var Format = require_Format();
    var atSeconds = new Format({
      template: "^@(\\d+)$",
      handler: function(matches) {
        const seconds = parseInt(matches[1], 10);
        const date = new Date(seconds * 1e3);
        return {
          year: date.getUTCFullYear(),
          month: date.getUTCMonth() + 1,
          day: date.getUTCDate(),
          hour: date.getUTCHours(),
          minute: date.getUTCMinutes(),
          second: date.getUTCSeconds()
        };
      }
    });
    module.exports = atSeconds;
  }
});

// node_modules/any-date-parser/src/formats/microsoftJson/microsoftJson.js
var require_microsoftJson = __commonJS({
  "node_modules/any-date-parser/src/formats/microsoftJson/microsoftJson.js"(exports, module) {
    var Format = require_Format();
    var microsoftJson = new Format({
      matcher: /^\/Date\((\d+)([+-]\d{4})?\)\/$/,
      handler: function(matches) {
        const milliseconds = parseInt(matches[1], 10);
        const date = new Date(milliseconds);
        return {
          year: date.getUTCFullYear(),
          month: date.getUTCMonth() + 1,
          day: date.getUTCDate(),
          hour: date.getUTCHours(),
          minute: date.getUTCMinutes(),
          second: date.getUTCSeconds(),
          millisecond: date.getUTCMilliseconds(),
          offset: matches[2] || 0
        };
      }
    });
    module.exports = microsoftJson;
  }
});

// node_modules/any-date-parser/src/data/unitShortcuts.js
var require_unitShortcuts = __commonJS({
  "node_modules/any-date-parser/src/data/unitShortcuts.js"(exports, module) {
    var unitShortcuts = {
      y: "year",
      M: "month",
      d: "day",
      w: "week",
      h: "hour",
      m: "minute",
      s: "second",
      ms: "millisecond"
    };
    module.exports = unitShortcuts;
  }
});

// node_modules/any-date-parser/src/formats/ago/ago.js
var require_ago = __commonJS({
  "node_modules/any-date-parser/src/formats/ago/ago.js"(exports, module) {
    var Format = require_Format();
    var unitShortcuts = require_unitShortcuts();
    var ago = new Format({
      matcher: /^(\+|-|in|) ?([\d.]+) ?(years?|months?|weeks?|days?|hours?|minutes?|seconds?|milliseconds?|ms|s|m|h|w|d|M|y)( ago)?$/i,
      handler: function([, sign, amount, unit, isAgo]) {
        amount = parseFloat(amount);
        if (unit.length <= 2) {
          unit = unitShortcuts[unit];
        } else {
          unit = unit.replace(/s$/, "");
          unit = unit.toLowerCase();
        }
        if (unit === "week") {
          unit = "day";
          amount *= 7;
        }
        if (sign === "-" || isAgo) {
          amount *= -1;
        }
        const now = this.now();
        if (unit === "millisecond") {
          now.setUTCMilliseconds(now.getUTCMilliseconds() + amount);
        } else if (unit === "second") {
          now.setUTCSeconds(now.getUTCSeconds() + amount);
        } else if (unit === "minute") {
          now.setUTCMinutes(now.getUTCMinutes() + amount);
        } else if (unit === "hour") {
          now.setUTCHours(now.getUTCHours() + amount);
        } else if (unit === "day") {
          now.setUTCDate(now.getUTCDate() + amount);
        } else if (unit === "month") {
          now.setUTCMonth(now.getUTCMonth() + amount);
        } else if (unit === "year") {
          now.setUTCFullYear(now.getUTCFullYear() + amount);
        }
        return {
          year: now.getUTCFullYear(),
          month: now.getUTCMonth() + 1,
          day: now.getUTCDate(),
          hour: now.getUTCHours(),
          minute: now.getUTCMinutes(),
          second: now.getUTCSeconds(),
          millisecond: now.getUTCMilliseconds()
        };
      }
    });
    module.exports = ago;
  }
});

// node_modules/any-date-parser/src/formats/chinese/chinese.js
var require_chinese = __commonJS({
  "node_modules/any-date-parser/src/formats/chinese/chinese.js"(exports, module) {
    var Format = require_Format();
    var LocaleHelper = require_LocaleHelper();
    var { chineseGroup: d } = require_numberingSystems();
    var locHelper;
    var chinese = new Format({
      template: `^(${d}{4}|${d}{2})\\s*\u5E74\\s*(${d}{1,2})\\s*\u6708\\s*(${d}{1,2})\\s*\u65E5$`,
      handler: function([, year, month, day]) {
        if (!locHelper) {
          locHelper = new LocaleHelper("zh");
          locHelper.numberingSystem = "hanidec";
          locHelper.buildNumbers();
        }
        return locHelper.castObject({ year, month, day });
      }
    });
    module.exports = chinese;
  }
});

// node_modules/any-date-parser/src/formats/dayMonth/dayMonth.js
var require_dayMonth = __commonJS({
  "node_modules/any-date-parser/src/formats/dayMonth/dayMonth.js"(exports, module) {
    var Format = require_Format();
    var dayMonth = new Format({
      template: "^(_DAY_)[\\/. ](_MONTH_)$",
      units: ["day", "month"]
    });
    module.exports = dayMonth;
  }
});

// node_modules/any-date-parser/src/formats/dayMonthname/dayMonthname.js
var require_dayMonthname = __commonJS({
  "node_modules/any-date-parser/src/formats/dayMonthname/dayMonthname.js"(exports, module) {
    var Format = require_Format();
    var dayMonthname = new Format({
      template: "^(_DAY_)(?:_ORDINAL_)?[ -](_MONTHNAME_)$",
      units: ["day", "month"]
    });
    module.exports = dayMonthname;
  }
});

// node_modules/any-date-parser/src/formats/dayMonthnameYear/dayMonthnameYear.js
var require_dayMonthnameYear = __commonJS({
  "node_modules/any-date-parser/src/formats/dayMonthnameYear/dayMonthnameYear.js"(exports, module) {
    var Format = require_Format();
    var dayMonthnameYear = new Format({
      template: "^(?:(?:_DAYNAME_),? )?(_DAY_)(?:_ORDINAL_)?([ -])(_MONTHNAME_)\\2(_YEAR_)$",
      units: ["day", null, "month", "year"]
    });
    module.exports = dayMonthnameYear;
  }
});

// node_modules/any-date-parser/src/formats/dayMonthYear/dayMonthYear.js
var require_dayMonthYear = __commonJS({
  "node_modules/any-date-parser/src/formats/dayMonthYear/dayMonthYear.js"(exports, module) {
    var Format = require_Format();
    var dayMonthYear = new Format({
      template: "^(_DAY_)([\\/. -])(_MONTH_)\\2(_YEAR_)$",
      units: ["day", null, "month", "year"]
    });
    module.exports = dayMonthYear;
  }
});

// node_modules/any-date-parser/src/formats/monthDay/monthDay.js
var require_monthDay = __commonJS({
  "node_modules/any-date-parser/src/formats/monthDay/monthDay.js"(exports, module) {
    var Format = require_Format();
    var monthDay = new Format({
      template: "^(_MONTH_)(?:[\\/-])(_DAY_)$",
      units: ["month", "day"]
    });
    module.exports = monthDay;
  }
});

// node_modules/any-date-parser/src/formats/monthDayYear/monthDayYear.js
var require_monthDayYear = __commonJS({
  "node_modules/any-date-parser/src/formats/monthDayYear/monthDayYear.js"(exports, module) {
    var Format = require_Format();
    var monthDayYear = new Format({
      template: "^(_MONTH_)([\\/-])(_DAY_)\\2(_YEAR_)$",
      units: ["month", null, "day", "year"],
      locales: [
        "ee-TG",
        "en-AS",
        "en-CA",
        "en-FM",
        "en-GH",
        "en-GU",
        "en-KE",
        "en-KY",
        "en-MH",
        "en-MP",
        "en-US",
        "en-VI",
        "en-WS",
        "sm-AS",
        "sm-SM"
      ]
    });
    module.exports = monthDayYear;
  }
});

// node_modules/any-date-parser/src/formats/monthnameDay/monthnameDay.js
var require_monthnameDay = __commonJS({
  "node_modules/any-date-parser/src/formats/monthnameDay/monthnameDay.js"(exports, module) {
    var Format = require_Format();
    var monthnameDay = new Format({
      template: "^(?:(?:_DAYNAME_),? )?(_MONTHNAME_)? (_DAY_)(?:_ORDINAL_)?$",
      units: ["month", "day"]
    });
    module.exports = monthnameDay;
  }
});

// node_modules/any-date-parser/src/formats/monthnameDayYear/monthnameDayYear.js
var require_monthnameDayYear = __commonJS({
  "node_modules/any-date-parser/src/formats/monthnameDayYear/monthnameDayYear.js"(exports, module) {
    var Format = require_Format();
    var monthnameDayYear = new Format({
      template: "^(?:(?:_DAYNAME_),? )?(_MONTHNAME_)? (_DAY_)(?:_ORDINAL_)?,? (_YEAR_)$",
      units: ["month", "day", "year"]
    });
    module.exports = monthnameDayYear;
  }
});

// node_modules/any-date-parser/src/formats/time12Hours/time12Hours.js
var require_time12Hours = __commonJS({
  "node_modules/any-date-parser/src/formats/time12Hours/time12Hours.js"(exports, module) {
    var LocaleHelper = require_LocaleHelper();
    var Format = require_Format();
    var time12Hours = new Format({
      template: "^(.*?)_SPACE_*(?:at|on|T|)_SPACE_*(_H12_|_H24_)(?:\\:(_MIN_)(?:\\:(_SEC_))?)?_SPACE_*(_MERIDIEM_)$",
      handler: function(matches, locale) {
        let [, dateExpr, hour, minute, second, ampm] = matches;
        let result = {};
        if (dateExpr) {
          result = this.parser.attempt(dateExpr, locale);
          if (result.invalid) {
            return null;
          }
        }
        const tpl = LocaleHelper.factory(locale);
        if (ampm) {
          const offset = tpl.lookups.meridiem[ampm.toLowerCase()] || 0;
          hour = parseFloat(hour);
          if (hour === 12) {
            hour = offset;
          } else if (hour > 12 && offset === 12) {
            hour += 0;
          } else {
            hour += offset;
          }
        }
        result.hour = hour;
        if (minute) {
          result.minute = minute;
        }
        if (second) {
          result.second = second;
        }
        return result;
      }
    });
    module.exports = time12Hours;
  }
});

// node_modules/any-date-parser/src/formats/time24Hours/time24Hours.js
var require_time24Hours = __commonJS({
  "node_modules/any-date-parser/src/formats/time24Hours/time24Hours.js"(exports, module) {
    var LocaleHelper = require_LocaleHelper();
    var Format = require_Format();
    var timezoneNames = require_timezoneNames();
    var time24Hours = new Format({
      template: "^(.*?)_SPACE_*(?:at|on|T|)_SPACE_*(_H24_)\\:(_MIN_)(?:\\:(_SEC_)(?:[\\.,](_MS_))?)?_SPACE_*(?:GMT)?_SPACE_*(_OFFSET_)?_SPACE_*(_ZONE_)?$",
      handler: function(matches, locale) {
        let [, dateExpr, hour, minute, second, millisecond, offset, zone] = matches;
        let result = {};
        if (dateExpr) {
          result = this.parser.attempt(dateExpr, locale);
          if (result.invalid) {
            return result;
          }
        }
        result.hour = hour;
        result.minute = minute;
        if (second) {
          result.second = second;
        }
        if (millisecond && millisecond.length > 3) {
          result.millisecond = millisecond.slice(0, 3);
        } else if (millisecond) {
          result.millisecond = millisecond;
        }
        if (zone && !offset && zone in timezoneNames) {
          result.offset = timezoneNames[zone];
        } else if (offset) {
          const locHelper = LocaleHelper.factory(locale);
          result.offset = locHelper.offsetToMinutes(offset);
        }
        return result;
      }
    });
    module.exports = time24Hours;
  }
});

// node_modules/any-date-parser/src/formats/today/today.js
var require_today = __commonJS({
  "node_modules/any-date-parser/src/formats/today/today.js"(exports, module) {
    var Format = require_Format();
    var today = new Format({
      matcher: /^(now|today|tomorrow|yesterday)/i,
      handler: function(match) {
        const now = this.now();
        const keyword = match[1].toLowerCase();
        switch (keyword) {
          case "tomorrow":
            now.setUTCDate(now.getUTCDate() + 1);
            break;
          case "yesterday":
            now.setUTCDate(now.getUTCDate() - 1);
            break;
        }
        const result = {
          year: now.getUTCFullYear(),
          month: now.getUTCMonth() + 1,
          day: now.getUTCDate()
        };
        if (keyword === "now") {
          result.hour = now.getUTCHours();
          result.minute = now.getUTCMinutes();
          result.second = now.getUTCSeconds();
          result.millisecond = now.getUTCMilliseconds();
        }
        return result;
      }
    });
    module.exports = today;
  }
});

// node_modules/any-date-parser/src/formats/twitter/twitter.js
var require_twitter = __commonJS({
  "node_modules/any-date-parser/src/formats/twitter/twitter.js"(exports, module) {
    var Format = require_Format();
    var twitter = new Format({
      template: "^(?:_DAYNAME_) (_MONTHNAME_) (_DAY_) (_H24_):(_MIN_):(_SEC_) (_OFFSET_) (_YEAR_)$",
      units: ["month", "day", "hour", "minute", "second", "offset", "year"]
    });
    module.exports = twitter;
  }
});

// node_modules/any-date-parser/src/formats/yearMonthDay/yearMonthDay.js
var require_yearMonthDay = __commonJS({
  "node_modules/any-date-parser/src/formats/yearMonthDay/yearMonthDay.js"(exports, module) {
    var Format = require_Format();
    var yearMonthDay = new Format({
      template: "^(_YEAR_)(-?)(_MONTH_)\\2(_DAY_)$",
      units: ["year", null, "month", "day"]
    });
    module.exports = yearMonthDay;
  }
});

// node_modules/any-date-parser/index.js
var require_any_date_parser = __commonJS({
  "node_modules/any-date-parser/index.js"(exports, module) {
    var Parser = require_Parser();
    var Format = require_Format();
    var LocaleHelper = require_LocaleHelper();
    var atSeconds = require_atSeconds();
    var microsoftJson = require_microsoftJson();
    var ago = require_ago();
    var chinese = require_chinese();
    var dayMonth = require_dayMonth();
    var dayMonthname = require_dayMonthname();
    var dayMonthnameYear = require_dayMonthnameYear();
    var dayMonthYear = require_dayMonthYear();
    var defaultLocale = require_defaultLocale();
    var monthDay = require_monthDay();
    var monthDayYear = require_monthDayYear();
    var monthnameDay = require_monthnameDay();
    var monthnameDayYear = require_monthnameDayYear();
    var time12Hours = require_time12Hours();
    var time24Hours = require_time24Hours();
    var today = require_today();
    var twitter = require_twitter();
    var yearMonthDay = require_yearMonthDay();
    var parser = new Parser();
    parser.addFormats([
      time24Hours,
      time12Hours,
      yearMonthDay,
      dayMonthnameYear,
      monthnameDayYear,
      monthDayYear,
      dayMonthYear,
      chinese,
      twitter,
      today,
      ago,
      monthnameDay,
      dayMonthname,
      monthDay,
      dayMonth,
      atSeconds,
      microsoftJson
    ]);
    parser.Parser = Parser;
    parser.Format = Format;
    parser.LocaleHelper = LocaleHelper;
    parser.defaultLocale = defaultLocale;
    parser.fromString = Date.fromString = parser.exportAsFunction();
    parser.fromAny = Date.fromAny = parser.exportAsFunctionAny();
    if (typeof window !== "undefined") {
      window.anyDateParser = parser;
    }
    module.exports = parser;
  }
});

// dep:any-date-parser
var any_date_parser_default = require_any_date_parser();
export {
  any_date_parser_default as default
};
//# sourceMappingURL=any-date-parser.js.map
