{
  "version": 3,
  "sources": ["../geo-coordinates-parser/toCoordinateFormat.js", "../geo-coordinates-parser/converter.js", "../geo-coordinates-parser/testformats.js", "../geo-coordinates-parser/merge.js", "dep:geo-coordinates-parser"],
  "sourcesContent": ["\r\n//borrowed from https://www.codegrepper.com/code-examples/javascript/javascript+converting+latitude+longitude+to+gps+coordinates\r\n\r\n/**\r\n * Converts decimalCoordinates to other formats commonly used\r\n * @param {*} format Either DMS or DM\r\n */\r\nfunction toCoordinateFormat(format) {\r\n\r\n  if(!['DMS', 'DM'].includes(format)) throw new Error('invalid format specified')\r\n\r\n  if(this.decimalCoordinates && this.decimalCoordinates.trim()) {\r\n    const parts = this.decimalCoordinates.split(',').map(x => x.trim())\r\n    const convertedLat = convert(parts[0], format, true)\r\n    const convertedLong = convert(parts[1], format, false)\r\n    return `${convertedLat}, ${convertedLong}`\r\n  }\r\n  else {\r\n    throw new Error('no decimal coordinates to convert')\r\n  }\r\n}\r\n\r\n//assumes everything is valid...\r\nfunction convert(coordString, format, isLatitude) {\r\n\r\n  const coord = Number(coordString)\r\n\r\n  let direction\r\n  if (isLatitude) {\r\n    direction = coord >= 0 ? \"N\" : \"S\";\r\n  } \r\n  else {\r\n    direction = coord >= 0 ? \"E\" : \"W\";\r\n  }\r\n\r\n  const absolute = Math.abs(coord);\r\n\r\n  const degrees = Math.floor(absolute);\r\n  const minutesNotTruncated = (absolute - degrees) * 60;\r\n\r\n  if(format == 'DM') {\r\n    return `${degrees}\u00B0 ${minutesNotTruncated.toFixed(3).replace(/\\.0+$/, '')}' ${direction}`;\r\n  }\r\n\r\n  //else\r\n  const minutes = Math.floor(minutesNotTruncated);\r\n  const seconds = ((minutesNotTruncated - minutes) * 60).toFixed(1).replace(/\\.0$/, '');\r\n\r\n  return `${degrees}\u00B0 ${minutes}' ${seconds}\" ${direction}`;\r\n}\r\n\r\nmodule.exports = toCoordinateFormat", "//function for converting coordinates from a string to decimal and verbatim\r\n\r\nconst toCoordinateFormat = require('./toCoordinateFormat.js')\r\n\r\n/**\r\n * Function for converting coordinates in a variety of formats to decimal coordinates\r\n * @param {string} coordsString The coordinates string to convert\r\n * @param {number} decimalPlaces The number of decimal places for converted coordinates; default is 5\r\n * @returns {object} { verbatimCoordinates, decimalCoordinates, decimalLatitude, decimalLongitude }\r\n */\r\nfunction converter(coordsString, decimalPlaces) {\r\n\r\n  //TODO add exact match to entered string, so that it can be used to filter out superflous text around it\r\n  if(!decimalPlaces) {\r\n    decimalPlaces = 5\r\n  }\r\n\r\n  coordsString = coordsString.replace(/\\s\\s+/g, ' ').trim(); //just to tidy up whitespaces\r\n\r\n  var ddLat = null;\r\n  var ddLng = null; \r\n  var latdir = \"\";\r\n  var lngdir = \"\";\r\n  var match = [];\t\r\n  var matchSuccess = false;\r\n\r\n  if (dd_re.test(coordsString)){\r\n    match = dd_re.exec(coordsString);\r\n    matchSuccess = checkMatch(match);\r\n    if (matchSuccess){\r\n      ddLat = match[2];\r\n      ddLng = match[6];\r\n      \r\n      //need to fix if there are ','s instead of '.'\r\n      if(ddLat.includes(',')) {\r\n        ddLat = ddLat.replace(',','.');\r\n      }\r\n      if(ddLng.includes(',')) {\r\n        ddLng = ddLng.replace(',', '.');\r\n      }\r\n      \r\n      //get directions\r\n      if(match[1]){\r\n        latdir = match[1];\r\n        lngdir = match[5];\r\n      } else if (match[4]){\r\n        latdir = match[4];\r\n        lngdir = match[8];\r\n      }\r\n\r\n    }\r\n    else {\r\n      throw new Error(\"invalid decimal coordinate format\")\t\t\r\n    }\r\n    \r\n  }\r\n  else if (dms_periods.test(coordsString)) {\r\n    match = dms_periods.exec(coordsString);\r\n    matchSuccess = checkMatch(match);\r\n    if (matchSuccess){\r\n      ddLat = Math.abs(parseInt(match[2]));\r\n      if (match[4])\r\n        ddLat += match[4]/60;\r\n      if (match[6])\r\n        ddLat += match[6]/3600;\r\n      if (parseInt(match[2]) < 0) //needed to \r\n        ddLat = -1 * ddLat;\r\n      ddLng = Math.abs(parseInt(match[9]));\r\n      if (match[11])\r\n        ddLng += match[11]/60;\r\n      if (match[13])\r\n        ddLng += match[13]/3600;\r\n      if (parseInt(match[9]) < 0) //needed to \r\n        ddLng = -1 * ddLng;\r\n      \r\n      if(match[1]){\r\n        latdir = match[1];\r\n        lngdir = match[8];\r\n      } else if (match[7]){\r\n        latdir = match[7];\r\n        lngdir = match[14];\r\n      }\r\n\r\n    }\r\n    else {\r\n      throw new Error(\"invalid DMS coordinates format\")\t\t\t\t\r\n    }\r\n  }\r\n  else if (dms_abbr.test(coordsString)) {\r\n    match = dms_abbr.exec(coordsString);\r\n    matchSuccess = checkMatch(match);\r\n    if (matchSuccess){\r\n      ddLat = Math.abs(parseInt(match[2]));\r\n      if (match[4]){\r\n        ddLat += match[4]/60;\r\n        if(!match[3])\r\n          match[3] = ' ';\r\n      }\r\n      if (match[6]) {\r\n        ddLat += match[6]/3600;\r\n        if(!match[5])\r\n          match[5] = ' ';\r\n      }\r\n      if (parseInt(match[2]) < 0) \r\n        ddLat = -1 * ddLat;\r\n      ddLng = Math.abs(parseInt(match[10]));\r\n      if (match[12]){\r\n        ddLng += match[12]/60;\r\n        if(!match[11])\r\n          match[11] = ' ';\r\n      }\r\n      if (match[14]){\r\n        ddLng += match[14]/3600;\r\n        if(!match[13])\r\n          match[13] = ' ';\r\n      }\r\n      if (parseInt(match[10]) < 0)  \r\n        ddLng = -1 * ddLng;\r\n        \r\n      if(match[1]){\r\n        latdir = match[1];\r\n        lngdir = match[9];\r\n      } else if (match[8]){\r\n        latdir = match[8];\r\n        lngdir = match[16];\r\n      }\r\n\r\n    }\r\n    else {\r\n      throw new Error(\"invalid DMS coordinates format\")\t\t\t\t\r\n    }\r\n  }\r\n  else if (coords_other.test(coordsString)) {\r\n    match = coords_other.exec(coordsString);\r\n    matchSuccess = checkMatch(match);\r\n    if (matchSuccess){\r\n      ddLat = Math.abs(parseInt(match[2]));\r\n      if (match[4]){\r\n        ddLat += match[4]/60;\r\n        if(!match[3])\r\n          match[3] = ' ';\r\n      }\r\n      if (match[6]) {\r\n        ddLat += match[6]/3600;\r\n        if(!match[5])\r\n          match[5] = ' ';\r\n      }\r\n      if (parseInt(match[2]) < 0) \r\n        ddLat = -1 * ddLat;\r\n        \r\n      ddLng = Math.abs(parseInt(match[10]));\r\n      if (match[12]){\r\n        ddLng += match[12]/60;\r\n        if(!match[11])\r\n          match[11] = ' ';\r\n      }\r\n      if (match[14]){\r\n        ddLng += match[14]/3600;\r\n        if(!match[13])\r\n          match[13] = ' ';\r\n      }\r\n      if (parseInt(match[10]) < 0) \r\n        ddLng = -1 * ddLng;\r\n      \r\n      if(match[1]){\r\n        latdir = match[1];\r\n        lngdir = match[9];\r\n      } else if (match[8]){\r\n        latdir = match[8];\r\n        lngdir = match[16];\r\n      }\r\n\r\n    }\r\n    else {\r\n      throw new Error(\"invalid coordinates format\")\t\t\t\t\r\n    }\r\n  }\r\n\r\n  //check longitude value - it can be wrong!\r\n  if (Math.abs(ddLng) >=180) {\r\n    throw new Error(\"invalid longitude value\")\t\t\t\t\r\n  }\r\n  \r\n  if (matchSuccess){\r\n    \r\n    //make sure the signs and cardinal directions match\r\n    var patt = /S|SOUTH/i;\r\n    if (patt.test(latdir))\r\n      if (ddLat > 0)\r\n        ddLat = -1 * ddLat;\r\n        \r\n    patt = /W|WEST/i;\r\n    if (patt.test(lngdir))\r\n      if (ddLng > 0)\r\n        ddLng = -1 * ddLng;\r\n\r\n\r\n    //we need to get the verbatim coords from the string\r\n    //we can't split down the middle because if there are decimals they may have different numbers on each side\r\n    //so we need to find the separating character, or if none, use the match values to split down the middle\r\n    var verbatimCoordinates = match[0].trim()\r\n    var verbatimLat\r\n    var verbatimLng\r\n\r\n    var sepChars = /[,/;\\u0020]/g //comma, forward slash and spacebar\r\n    var seps = verbatimCoordinates.match(sepChars)\r\n\r\n    if (seps == null) {\r\n      //split down the middle\r\n      var middle = Math.floor(coordsString.length/2)\r\n      verbatimLat = verbatimCoordinates.substring(0, middle).trim()\r\n      verbatimLng = verbatimCoordinates.substring(middle).trim()\r\n    }\r\n    else { //if length is odd then find the index of the middle value\r\n      \r\n      //get the middle index\r\n      var middle\r\n      //easy for odd numbers\r\n      if (seps.length % 2 == 1) {\r\n        middle = Math.floor(seps.length / 2) \r\n      }\r\n      else {\r\n        middle = (seps.length / 2) - 1\r\n      }\r\n\r\n\r\n      //walk through seps until we get to the middle\r\n      var splitIndex = 0;\r\n      \r\n      //it might be only one value\r\n      if (middle == 0){\r\n        splitIndex = verbatimCoordinates.indexOf(seps[0])\r\n        verbatimLat = verbatimCoordinates.substring(0, splitIndex).trim()\r\n        verbatimLng = verbatimCoordinates.substring(splitIndex + 1).trim()\r\n      }\r\n      else {\r\n        var currSepIndex = 0\r\n        var startSearchIndex = 0\r\n        while (currSepIndex <= middle){\r\n          splitIndex = verbatimCoordinates.indexOf(seps[currSepIndex], startSearchIndex)\r\n          startSearchIndex = splitIndex + 1\r\n          currSepIndex++\r\n        }\r\n\r\n        verbatimLat = verbatimCoordinates.substring(0, splitIndex).trim()\r\n        verbatimLng = verbatimCoordinates.substring(splitIndex + 1).trim()\r\n\r\n      }\r\n\r\n    }\r\n\r\n    //all done!!\r\n    //just truncate the decimals appropriately\r\n    if(isNaN(ddLat) && ddLat.includes(',')) {\r\n      ddLat = ddLat.replace(',', '.')\r\n    }\r\n\r\n    ddLat = Number(Number(ddLat).toFixed(decimalPlaces))\r\n\r\n    if(isNaN(ddLng) && ddLng.includes(',')) {\r\n      ddLng = ddLng.replace(',', '.')\r\n    }\r\n\r\n    ddLng = Number(Number(ddLng).toFixed(decimalPlaces))\r\n\r\n    return Object.freeze({\r\n      verbatimCoordinates, \r\n      verbatimLatitude: verbatimLat,\r\n      verbatimLongitude: verbatimLng,\r\n      decimalLatitude:  ddLat,\r\n      decimalLongitude: ddLng,\r\n      decimalCoordinates: `${ddLat},${ddLng}`,\r\n      closeEnough: coordsCloseEnough,\r\n      toCoordinateFormat\r\n    })\r\n  }\r\n  else {\r\n    throw new Error(\"coordinates pattern match failed\")\r\n  }\r\n\r\n}\r\n\r\nfunction checkMatch(match) { //test if the matched groups arrays are 'balanced'. match is the resulting array\r\n  \r\n  if(!isNaN(match[0])){ //we've matched a number, not what we want....\r\n    return false\r\n  }\r\n  //first remove the empty values from the array\r\n  var filteredMatch = match.filter(x=>x);\r\n  \r\n  //we need to shift the array because it contains the whole coordinates string in the first item\r\n  filteredMatch.shift();\r\n  \r\n  /*\r\n  //if minutes or seconds are out of bounds, the array length is wrong\r\n  if (filteredMatch.length == 4) {\r\n    return false\r\n  }\r\n  */\r\n  \r\n  //then check the array length is an even number else exit\r\n  if (filteredMatch.length % 2 > 0) {\r\n    return false;\r\n  }\r\n\r\n  //regex for testing corresponding values match\r\n  var numerictest = /^[-+]?(\\d+|\\d+\\.\\d*|\\d*\\.\\d+)$/; //for testing numeric values\r\n  var stringtest = /[A-Za-z]+/; //strings - the contents of strings are already matched when this is used\r\n  \r\n  \r\n  var halflen = filteredMatch.length/2;\r\n  var result = true;\r\n  for (var i = 0; i < halflen; i++) {\r\n    if (numerictest.test(filteredMatch[i]) != numerictest.test(filteredMatch[i + halflen]) || stringtest.test(filteredMatch[i]) != stringtest.test(filteredMatch[i + halflen])) {\r\n      result = false;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  return result;\r\n}\r\n\r\n//functions for coordinate validation\r\n\r\n//as decimal arithmetic is not straightforward, we approximate\r\nfunction decimalsCloseEnough(dec1, dec2){\r\n  var originaldiff = Math.abs(dec1 - dec2)\r\n  diff = Number(originaldiff.toFixed(6))\r\n  if (diff <= 0.00001){\r\n    return true\r\n  }\r\n  else {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction coordsCloseEnough(coordsToTest) {\r\n  if (coordsToTest.includes(',')){\r\n    var coords = coordsToTest.split(',')\r\n    if(Number(coords[0]) == NaN || Number(coords[1]) == NaN) {\r\n      throw new Error(\"coords are not valid decimals\")\r\n    }\r\n    else {\r\n      return decimalsCloseEnough(this.decimalLatitude, Number(coords[0])) && decimalsCloseEnough(this.decimalLongitude, coords[1]) //this here will be the converted coordinates object\r\n    }\r\n  }\r\n  else {\r\n    throw new Error(\"coords being tested must be separated by a comma\")\r\n  }\r\n}\r\n\r\n//Coordinates pattern matching regex\r\nvar dd_re = /(NORTH|SOUTH|[NS])?[\\s]*([+-]?[0-8]?[0-9](?:[\\.,]\\d{3,}))([\u2022\u00BA\u00B0]?)[\\s]*(NORTH|SOUTH|[NS])?[\\s]*[,/;]?[\\s]*(EAST|WEST|[EW])?[\\s]*([+-]?[0-1]?[0-9]?[0-9](?:[\\.,]\\d{3,}))([\u2022\u00BA\u00B0]?)[\\s]*(EAST|WEST|[EW])?/i;\r\n//degrees minutes seconds with '.' as separator - gives array with 15 values\r\nvar dms_periods = /(NORTH|SOUTH|[NS])?[\\ \\t]*([+-]?[0-8]?[0-9])[\\ \\t]*(\\.)[\\ \\t]*([0-5]?[0-9])[\\ \\t]*(\\.)?[\\ \\t]*((?:[0-5]?[0-9])(?:\\.\\d{1,3})?)?(NORTH|SOUTH|[NS])?(?:[\\ \\t]*[,/;][\\ \\t]*|[\\ \\t]*)(EAST|WEST|[EW])?[\\ \\t]*([+-]?[0-1]?[0-9]?[0-9])[\\ \\t]*(\\.)[\\ \\t]*([0-5]?[0-9])[\\ \\t]*(\\.)?[\\ \\t]*((?:[0-5]?[0-9])(?:\\.\\d{1,3})?)?(EAST|WEST|[EW])?/i;\r\n//degrees minutes seconds with words 'degrees, minutes, seconds' as separators (needed because the s of seconds messes with the S of SOUTH) - gives array of 17 values\r\nvar dms_abbr = /(NORTH|SOUTH|[NS])?[\\ \\t]*([+-]?[0-8]?[0-9])[\\ \\t]*(D(?:EG)?(?:REES)?)[\\ \\t]*([0-5]?[0-9])[\\ \\t]*(M(?:IN)?(?:UTES)?)[\\ \\t]*((?:[0-5]?[0-9])(?:\\.\\d{1,3})?)?(S(?:EC)?(?:ONDS)?)?[\\ \\t]*(NORTH|SOUTH|[NS])?(?:[\\ \\t]*[,/;][\\ \\t]*|[\\ \\t]*)(EAST|WEST|[EW])?[\\ \\t]*([+-]?[0-1]?[0-9]?[0-9])[\\ \\t]*(D(?:EG)?(?:REES)?)[\\ \\t]*([0-5]?[0-9])[\\ \\t]*(M(?:IN)?(?:UTES)?)[\\ \\t]*((?:[0-5]?[0-9])(?:\\.\\d{1,3})?)?(S(?:EC)?(?:ONDS)?)[\\ \\t]*(EAST|WEST|[EW])?/i;\r\n//everything else - gives array of 17 values \r\nvar coords_other = /(NORTH|SOUTH|[NS])?[\\ \\t]*([+-]?[0-8]?[0-9])[\\ \\t]*([\u2022\u00BA\u00B0\\.:]|D(?:EG)?(?:REES)?)?[\\ \\t]*,?([0-5]?[0-9](?:\\.\\d{1,})?)?[\\ \\t]*(['\u2032\u00B4\u2019\\.:]|M(?:IN)?(?:UTES)?)?[\\ \\t]*,?((?:[0-5]?[0-9])(?:\\.\\d{1,3})?)?[\\ \\t]*(''|\u2032\u2032|\u2019\u2019|\u00B4\u00B4|[\"\u2033\u201D\\.])?[\\ \\t]*(NORTH|SOUTH|[NS])?(?:\\s*[,/;]\\s*|\\s*)(EAST|WEST|[EW])?[\\ \\t]*([+-]?[0-1]?[0-9]?[0-9])[\\ \\t]*([\u2022\u00BA\u00B0\\.:]|D(?:EG)?(?:REES)?)?[\\ \\t]*,?([0-5]?[0-9](?:\\.\\d{1,})?)?[\\ \\t]*(['\u2032\u00B4\u2019\\.:]|M(?:IN)?(?:UTES)?)?[\\ \\t]*,?((?:[0-5]?[0-9])(?:\\.\\d{1,3})?)?[\\ \\t]*(''|\u2032\u2032|\u00B4\u00B4|\u2019\u2019|[\"\u2033\u201D\\.])?[\\ \\t]*(EAST|WEST|[EW])?/i;\r\n\r\nconst to = Object.freeze({\r\n  DMS: 'DMS',\r\n  DM: 'DM'\r\n})\r\n\r\nconverter.to = to\r\n\r\nmodule.exports = converter", "//return an array of coordinate strings for testing\r\n\r\n\r\n//coordinations-parser formats\r\n//https://www.npmjs.com/package/coordinate-parser\r\nvar coordsParserFormats = [\r\n  {\r\n    verbatimCoordinates: '40.123, -74.123',\r\n    verbatimLatitude: '40.123', \r\n    verbatimLongitude: '-74.123' \r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123\u00B0 N 74.123\u00B0 W',\r\n    verbatimLatitude: '40.123\u00B0 N', \r\n    verbatimLongitude: '74.123\u00B0 W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123\u00B0 N 74.123\u00B0 W',\r\n    verbatimLatitude: '40.123\u00B0 N', \r\n    verbatimLongitude: '74.123\u00B0 W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B0 7\u00B4 22.8\" N 74\u00B0 7\u00B4 22.8\" W',\r\n    verbatimLatitude: '40\u00B0 7\u00B4 22.8\" N', \r\n    verbatimLongitude: '74\u00B0 7\u00B4 22.8\" W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B0 7.38\u2019 , -74\u00B0 7.38\u2019',\r\n    verbatimLatitude: '40\u00B0 7.38\u2019', \r\n    verbatimLongitude: '-74\u00B0 7.38\u2019'\r\n  },\r\n  {\r\n    verbatimCoordinates: 'N40\u00B07\u201922.8\u2019\u2019, W74\u00B07\u201922.8\u2019\u2019',\r\n    verbatimLatitude: 'N40\u00B07\u201922.8\u2019\u2019', \r\n    verbatimLongitude: 'W74\u00B07\u201922.8\u2019\u2019'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B07\u201922.8\"N, 74\u00B07\u201922.8\"W',\r\n    verbatimLatitude: '40\u00B07\u201922.8\"N', \r\n    verbatimLongitude: '74\u00B07\u201922.8\"W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B07\\'22.8\"N, 74\u00B07\\'22.8\"W',\r\n    verbatimLatitude: '40\u00B07\\'22.8\"N', \r\n    verbatimLongitude: '74\u00B07\\'22.8\"W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40 7 22.8, -74 7 22.8',\r\n    verbatimLatitude: '40 7 22.8', \r\n    verbatimLongitude: '-74 7 22.8'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123 -74.123',\r\n    verbatimLatitude: '40.123', \r\n    verbatimLongitude: '-74.123'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123\u00B0,-74.123\u00B0',\r\n    verbatimLatitude: '40.123\u00B0', \r\n    verbatimLongitude: '-74.123\u00B0'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123N74.123W',\r\n    verbatimLatitude: '40.123N', \r\n    verbatimLongitude: '74.123W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '4007.38N7407.38W',\r\n    verbatimLatitude: '4007.38N', \r\n    verbatimLongitude: '7407.38W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B07\u201922.8\"N, 74\u00B07\u201922.8\"W',\r\n    verbatimLatitude: '40\u00B07\u201922.8\"N', \r\n    verbatimLongitude: '74\u00B07\u201922.8\"W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '400722.8N740722.8W',\r\n    verbatimLatitude: '400722.8N', \r\n    verbatimLongitude: '740722.8W'\r\n  },\r\n  {\r\n    verbatimCoordinates: 'N 40 7.38 W 74 7.38',\r\n    verbatimLatitude: 'N 40 7.38', \r\n    verbatimLongitude: 'W 74 7.38'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40:7:22.8N 74:7:22.8W',\r\n    verbatimLatitude: '40:7:22.8N', \r\n    verbatimLongitude: '74:7:22.8W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40:7:23N,74:7:23W',\r\n    verbatimLatitude: '40:7:23N', \r\n    verbatimLongitude: '74:7:23W',\r\n    decimalLatitude: 40.1230555555,\r\n    decimalLongitude: -74.1230555555\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B07\u201923\"N 74\u00B07\u201923\"W',\r\n    verbatimLatitude: '40\u00B07\u201923\"N', \r\n    verbatimLongitude: '74\u00B07\u201923\"W',\r\n    decimalLatitude: 40.1230555555,\r\n    decimalLongitude: -74.12305555555555\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B07\u201923\" -74\u00B07\u201923\"',\r\n    verbatimLatitude: '40\u00B07\u201923\"', \r\n    verbatimLongitude: '-74\u00B07\u201923\"',\r\n    decimalLatitude: 40.1230555555,\r\n    decimalLongitude: -74.123055555\r\n  },\r\n  {\r\n    verbatimCoordinates: '40d 7\u2019 23\" N 74d 7\u2019 23\" W',\r\n    verbatimLatitude: '40d 7\u2019 23\" N', \r\n    verbatimLongitude: '74d 7\u2019 23\" W',\r\n    decimalLatitude: 40.1230555555,\r\n    decimalLongitude: -74.123055555\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123N 74.123W',\r\n    verbatimLatitude: '40.123N', \r\n    verbatimLongitude: '74.123W'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B0 7.38, -74\u00B0 7.38',\r\n    verbatimLatitude: '40\u00B0 7.38', \r\n    verbatimLongitude: '-74\u00B0 7.38'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B0 7.38, -74\u00B0 7.38',\r\n    verbatimLatitude: '40\u00B0 7.38', \r\n    verbatimLongitude: '-74\u00B0 7.38'\r\n  },\r\n  {\r\n    verbatimCoordinates: '40 7 22.8; -74 7 22.8', //semicolon separator\r\n    verbatimLatitude: '40 7 22.8', \r\n    verbatimLongitude: '-74 7 22.8'\r\n  }\r\n]\r\n\r\nvar coordsParserDecimals = {\r\n  decimalLatitude: 40.123, \r\n  decimalLongitude: -74.123\r\n}\r\n\r\n//formats from https://gist.github.com/moole/3707127/337bd31d813a10abcf55084381803e5bbb0b20dc \r\n\r\nvar coordsRegexFormats = [\r\n  {\r\n    verbatimCoordinates: '50\u00B04\\'17.698\"south, 14\u00B024\\'2.826\"east',\r\n    verbatimLatitude: '50\u00B04\\'17.698\"south', \r\n    verbatimLongitude: '14\u00B024\\'2.826\"east',\r\n    decimalLatitude: -50.0715827777777778,\r\n    decimalLongitude: 14.400785\r\n\r\n  },\r\n  {\r\n    verbatimCoordinates: '50d4m17.698S 14d24m2.826E',\r\n    verbatimLatitude: '50d4m17.698S', \r\n    verbatimLongitude: '14d24m2.826E',\r\n    decimalLatitude: -50.0715827777777778,\r\n    decimalLongitude: 14.400785\r\n  },\r\n  {\r\n    verbatimCoordinates: '40:26:46N,79:56:55W',\r\n    verbatimLatitude: '40:26:46N', \r\n    verbatimLongitude: '79:56:55W',\r\n    decimalLatitude: 40.4461111111111111,\r\n    decimalLongitude: -79.9486111111111111\r\n  },\r\n  {\r\n    verbatimCoordinates: '40:26:46.302N 79:56:55.903W',\r\n    verbatimLatitude: '40:26:46.302N', \r\n    verbatimLongitude: '79:56:55.903W',\r\n    decimalLatitude: 40.446195,\r\n    decimalLongitude: -79.9488619444444444\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B026\u203247\u2033N 79\u00B058\u203236\u2033W',\r\n    verbatimLatitude: '40\u00B026\u203247\u2033N', \r\n    verbatimLongitude: '79\u00B058\u203236\u2033W',\r\n    decimalLatitude: 40.4463888888888889,\r\n    decimalLongitude: -79.9766666666666667\r\n\r\n  },\r\n  {\r\n    verbatimCoordinates: '40d 26\u2032 47\u2033 N 79d 58\u2032 36\u2033 W',\r\n    verbatimLatitude: '40d 26\u2032 47\u2033 N', \r\n    verbatimLongitude: '79d 58\u2032 36\u2033 W',\r\n    decimalLatitude: 40.4463888888888889,\r\n    decimalLongitude: -79.9766666666666667\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.446195N 79.948862W',\r\n    verbatimLatitude: '40.446195N', \r\n    verbatimLongitude: '79.948862W',\r\n    decimalLatitude: 40.446195,\r\n    decimalLongitude: -79.948862\r\n  },   \r\n  {\r\n    verbatimCoordinates: '40,446195\u00B0 79,948862\u00B0',\r\n    verbatimLatitude: '40,446195\u00B0', \r\n    verbatimLongitude: '79,948862\u00B0',\r\n    decimalLatitude: 40.446195,\r\n    decimalLongitude: 79.948862\r\n  }, \r\n  {\r\n    verbatimCoordinates: '40\u00B0 26.7717, -79\u00B0 56.93172',\r\n    verbatimLatitude: '40\u00B0 26.7717', \r\n    verbatimLongitude: '-79\u00B0 56.93172',\r\n    decimalLatitude: 40.446195,\r\n    decimalLongitude: -79.948862\r\n  }, \r\n  {\r\n    verbatimCoordinates: '40.446195, -79.948862',\r\n    verbatimLatitude: '40.446195', \r\n    verbatimLongitude: '-79.948862',\r\n    decimalLatitude: 40.446195,\r\n    decimalLongitude: -79.948862\r\n  },\r\n  {\r\n    verbatimCoordinates: '40.123256; -74.123256', //testing semicolon\r\n    verbatimLatitude: '40.123256', \r\n    verbatimLongitude: '-74.123256',\r\n    decimalLatitude: 40.123256, \r\n    decimalLongitude: -74.123256 \r\n  }  \r\n]\r\n\r\nvar otherFormats = [\r\n  // additional formats we've encountered\r\n  {\r\n    verbatimCoordinates: '18.24S 22.45E', //this is read as degrees and minutes\r\n    verbatimLatitude: '18.24S', \r\n    verbatimLongitude: '22.45E', \r\n    decimalLatitude: -18.4,\r\n    decimalLongitude: 22.75\r\n  }, \r\n  {\r\n    verbatimCoordinates: '27deg 15min 45.2sec S 18deg 32min 53.7sec E',\r\n    verbatimLatitude: '27deg 15min 45.2sec S', \r\n    verbatimLongitude: '18deg 32min 53.7sec E',\r\n    decimalLatitude: -27.2625555555555556,\r\n    decimalLongitude: 18.54825\r\n  }, \r\n  {\r\n    verbatimCoordinates: '-23.3245\u00B0 S / 28.2344\u00B0 E',\r\n    verbatimLatitude: '-23.3245\u00B0 S', \r\n    verbatimLongitude: '28.2344\u00B0 E',\r\n    decimalLatitude: -23.3245,\r\n    decimalLongitude: 28.2344\r\n  },\r\n  {\r\n    verbatimCoordinates: '40\u00B0 26.7717 -79\u00B0 56.93172',\r\n    verbatimLatitude: '40\u00B0 26.7717', \r\n    verbatimLongitude: '-79\u00B0 56.93172', \r\n    decimalLatitude: 40.446195,\r\n    decimalLongitude: -79.948862\r\n\r\n  },\r\n  {\r\n    verbatimCoordinates: '27.15.45S 18.32.53E',\r\n    verbatimLatitude: '27.15.45S', \r\n    verbatimLongitude: '18.32.53E',\r\n    decimalLatitude: -27.2625,\r\n    decimalLongitude: 18.548055\r\n  }, \r\n  {\r\n    verbatimCoordinates: '27,71372\u00B0 S 23,07771\u00B0 E', //decimals with commas\r\n    verbatimLatitude: '27,71372\u00B0 S', \r\n    verbatimLongitude: '23,07771\u00B0 E',\r\n    decimalLatitude: -27.71372,\r\n    decimalLongitude: 23.07771\r\n  }\r\n]\r\n\r\nlet userProvidedFormats = [\r\n  {\r\n    //issue https://github.com/ianengelbrecht/geo-coordinates-parser/issues/1\r\n    verbatimCoordinates: 'N 52d0m0s E 000d0m0s',\r\n    verbatimLatitude: 'N 52d0m0s', \r\n    verbatimLongitude: 'E 000d0m0s',\r\n    decimalLatitude: 52.00000,\r\n    decimalLongitude: 0.0000\r\n  },\r\n  {\r\n    // https://github.com/ianengelbrecht/geo-coordinates-parser/issues/1\r\n    verbatimCoordinates: 'N49 0.000 E02 33.314',\r\n    verbatimLatitude: 'N49 0.000', \r\n    verbatimLongitude: 'E02 33.314',\r\n    decimalLatitude: 49.00000,\r\n    decimalLongitude: 2.5552333333333333\r\n  }\r\n]\r\n\r\nfunction getAllTestFormats() {\r\n  var arr1 = []\r\n  coordsParserFormats.forEach(item => {\r\n    if (item.decimalLatitude){\r\n      arr1.push(item)\r\n    }\r\n    else {\r\n      arr1.push({...item, ...coordsParserDecimals})\r\n    }\r\n  })\r\n  \r\n  return [...arr1, ...coordsRegexFormats, ...otherFormats, ...userProvidedFormats]\r\n \r\n}\r\n\r\nmodule.exports = getAllTestFormats();", "//adds the formats to the convert object\r\n//we need to use this as the source for the npm package so that the formats are not included in the bundle\r\n\r\nvar convert = require('./converter.js')\r\nvar formats = require('./testformats').map(format => format.verbatimCoordinates)\r\n\r\nconvert.formats = formats\r\n\r\nmodule.exports = convert", "export default require(\"./node_modules/geo-coordinates-parser/merge.js\");"],
  "mappings": "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",
  "names": []
}
