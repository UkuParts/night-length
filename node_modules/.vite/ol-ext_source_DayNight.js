import {
  Polygon_default
} from "./chunk-YAF2B7VX.js";
import {
  Feature_default,
  Vector_default,
  all
} from "./chunk-KMRUCRWH.js";
import "./chunk-I5XJRMCO.js";
import "./chunk-LT7QKDD7.js";
import "./chunk-ISLN5VAW.js";
import "./chunk-QKN2LTGH.js";
import "./chunk-KSL5UQJJ.js";
import "./chunk-B7LZDY4N.js";

// node_modules/ol-ext/util/ext.js
if (window.ol && !ol.ext) {
  ol.ext = {};
}
var ol_ext_inherits = function(child, parent) {
  child.prototype = Object.create(parent.prototype);
  child.prototype.constructor = child;
};
if (window.ol) {
  if (!ol.inherits)
    ol.inherits = ol_ext_inherits;
}
if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = Array.prototype.forEach;
}
if (window.Element && !Element.prototype.remove) {
  Element.prototype.remove = function() {
    if (this.parentNode)
      this.parentNode.removeChild(this);
  };
}
var ext_default = ol_ext_inherits;

// node_modules/ol-ext/source/DayNight.js
var ol_source_DayNight = function(options) {
  options = options || {};
  options.loader = this._loader;
  options.strategy = all;
  Vector_default.call(this, options);
  this.set("time", options.time || new Date());
  this.set("step", options.step || 1);
};
ext_default(ol_source_DayNight, Vector_default);
(function() {
  ol_source_DayNight.prototype._loader = function(extent, resolution, projection) {
    var lonlat = this.getCoordinates(this.get("time"));
    var geom = new Polygon_default([lonlat]);
    geom.transform("EPSG:4326", projection);
    this.addFeature(new Feature_default(geom));
  };
  ol_source_DayNight.prototype.setTime = function(time) {
    this.set("time", time);
    this.refresh();
  };
  function _sunEclipticPosition(julianDay) {
    var deg2rad = Math.PI / 180;
    var n = julianDay - 2451545;
    var L = 280.46 + 0.9856474 * n;
    L %= 360;
    var g = 357.528 + 0.9856003 * n;
    g %= 360;
    var lambda = L + 1.915 * Math.sin(g * deg2rad) + 0.02 * Math.sin(2 * g * deg2rad);
    var R = 1.00014 - 0.01671 * Math.cos(g * deg2rad) - 14e-4 * Math.cos(2 * g * deg2rad);
    return { lambda, R };
  }
  function _eclipticObliquity(julianDay) {
    var n = julianDay - 2451545;
    var T = n / 36525;
    var epsilon = 23.43929111 - T * (46.836769 / 3600 - T * (1831e-7 / 3600 + T * (20034e-7 / 3600 - T * (576e-9 / 3600 - T * 434e-10 / 3600))));
    return epsilon;
  }
  function _sunEquatorialPosition(sunEclLon, eclObliq) {
    var rad2deg = 180 / Math.PI;
    var deg2rad = Math.PI / 180;
    var alpha = Math.atan(Math.cos(eclObliq * deg2rad) * Math.tan(sunEclLon * deg2rad)) * rad2deg;
    var delta = Math.asin(Math.sin(eclObliq * deg2rad) * Math.sin(sunEclLon * deg2rad)) * rad2deg;
    var lQuadrant = Math.floor(sunEclLon / 90) * 90;
    var raQuadrant = Math.floor(alpha / 90) * 90;
    alpha = alpha + (lQuadrant - raQuadrant);
    return { alpha, delta };
  }
  ol_source_DayNight.prototype.getSunPosition = function(time) {
    var date = time ? new Date(time) : new Date();
    var julianDay = date / 864e5 + 24405875e-1;
    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545)) % 24;
    var sunEclPos = _sunEclipticPosition(julianDay);
    var eclObliq = _eclipticObliquity(julianDay);
    var sunEqPos = _sunEquatorialPosition(sunEclPos.lambda, eclObliq);
    return [sunEqPos.alpha - gst * 15, sunEqPos.delta];
  };
  ol_source_DayNight.getNightLat = function(lon, time) {
    var rad2deg = 180 / Math.PI;
    var deg2rad = Math.PI / 180;
    var date = time ? new Date(time) : new Date();
    var julianDay = date / 864e5 + 24405875e-1;
    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545)) % 24;
    var sunEclPos = _sunEclipticPosition(julianDay);
    var eclObliq = _eclipticObliquity(julianDay);
    var sunEqPos = _sunEquatorialPosition(sunEclPos.lambda, eclObliq);
    var ha = gst * 15 + lon - sunEqPos.alpha;
    var lat = Math.atan(-Math.cos(ha * deg2rad) / Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;
    return lat;
  };
  ol_source_DayNight.prototype.getCoordinates = function(time, options) {
    var rad2deg = 180 / Math.PI;
    var deg2rad = Math.PI / 180;
    var date = time ? new Date(time) : new Date();
    var julianDay = date / 864e5 + 24405875e-1;
    var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545)) % 24;
    var lonlat = [];
    var sunEclPos = _sunEclipticPosition(julianDay);
    var eclObliq = _eclipticObliquity(julianDay);
    var sunEqPos = _sunEquatorialPosition(sunEclPos.lambda, eclObliq);
    var step = this.get("step") || 1;
    for (var i = -180; i <= 180; i += step) {
      var lon = i;
      var ha = gst * 15 + lon - sunEqPos.alpha;
      var lat = Math.atan(-Math.cos(ha * deg2rad) / Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;
      lonlat.push([lon, lat]);
    }
    switch (options) {
      case "line":
        break;
      case "day":
        sunEqPos.delta *= -1;
      default: {
        lat = sunEqPos.delta < 0 ? 90 : -90;
        for (var tlon = 180; tlon >= -180; tlon -= step) {
          lonlat.push([tlon, lat]);
        }
        lonlat.push(lonlat[0]);
        break;
      }
    }
    if (options === "daynight") {
      var day = [];
      lonlat.forEach(function(t) {
        day.push(t.slice());
      });
      day[0][1] = -day[0][1];
      day[day.length - 1][1] = -day[0][1];
      day[day.length - 1][1] = -day[0][1];
      lonlat = [lonlat, day];
    }
    return lonlat;
  };
})();
var DayNight_default = ol_source_DayNight;

// dep:ol-ext_source_DayNight
var ol_ext_source_DayNight_default = DayNight_default;
export {
  ol_ext_source_DayNight_default as default
};
//# sourceMappingURL=ol-ext_source_DayNight.js.map
