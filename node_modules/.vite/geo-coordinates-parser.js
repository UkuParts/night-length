import {
  __commonJS,
  __spreadValues
} from "./chunk-B7LZDY4N.js";

// node_modules/geo-coordinates-parser/toCoordinateFormat.js
var require_toCoordinateFormat = __commonJS({
  "node_modules/geo-coordinates-parser/toCoordinateFormat.js"(exports, module) {
    function toCoordinateFormat(format) {
      if (!["DMS", "DM"].includes(format))
        throw new Error("invalid format specified");
      if (this.decimalCoordinates && this.decimalCoordinates.trim()) {
        const parts = this.decimalCoordinates.split(",").map((x) => x.trim());
        const convertedLat = convert(parts[0], format, true);
        const convertedLong = convert(parts[1], format, false);
        return `${convertedLat}, ${convertedLong}`;
      } else {
        throw new Error("no decimal coordinates to convert");
      }
    }
    function convert(coordString, format, isLatitude) {
      const coord = Number(coordString);
      let direction;
      if (isLatitude) {
        direction = coord >= 0 ? "N" : "S";
      } else {
        direction = coord >= 0 ? "E" : "W";
      }
      const absolute = Math.abs(coord);
      const degrees = Math.floor(absolute);
      const minutesNotTruncated = (absolute - degrees) * 60;
      if (format == "DM") {
        return `${degrees}\xB0 ${minutesNotTruncated.toFixed(3).replace(/\.0+$/, "")}' ${direction}`;
      }
      const minutes = Math.floor(minutesNotTruncated);
      const seconds = ((minutesNotTruncated - minutes) * 60).toFixed(1).replace(/\.0$/, "");
      return `${degrees}\xB0 ${minutes}' ${seconds}" ${direction}`;
    }
    module.exports = toCoordinateFormat;
  }
});

// node_modules/geo-coordinates-parser/converter.js
var require_converter = __commonJS({
  "node_modules/geo-coordinates-parser/converter.js"(exports, module) {
    var toCoordinateFormat = require_toCoordinateFormat();
    function converter(coordsString, decimalPlaces) {
      if (!decimalPlaces) {
        decimalPlaces = 5;
      }
      coordsString = coordsString.replace(/\s\s+/g, " ").trim();
      var ddLat = null;
      var ddLng = null;
      var latdir = "";
      var lngdir = "";
      var match = [];
      var matchSuccess = false;
      if (dd_re.test(coordsString)) {
        match = dd_re.exec(coordsString);
        matchSuccess = checkMatch(match);
        if (matchSuccess) {
          ddLat = match[2];
          ddLng = match[6];
          if (ddLat.includes(",")) {
            ddLat = ddLat.replace(",", ".");
          }
          if (ddLng.includes(",")) {
            ddLng = ddLng.replace(",", ".");
          }
          if (match[1]) {
            latdir = match[1];
            lngdir = match[5];
          } else if (match[4]) {
            latdir = match[4];
            lngdir = match[8];
          }
        } else {
          throw new Error("invalid decimal coordinate format");
        }
      } else if (dms_periods.test(coordsString)) {
        match = dms_periods.exec(coordsString);
        matchSuccess = checkMatch(match);
        if (matchSuccess) {
          ddLat = Math.abs(parseInt(match[2]));
          if (match[4])
            ddLat += match[4] / 60;
          if (match[6])
            ddLat += match[6] / 3600;
          if (parseInt(match[2]) < 0)
            ddLat = -1 * ddLat;
          ddLng = Math.abs(parseInt(match[9]));
          if (match[11])
            ddLng += match[11] / 60;
          if (match[13])
            ddLng += match[13] / 3600;
          if (parseInt(match[9]) < 0)
            ddLng = -1 * ddLng;
          if (match[1]) {
            latdir = match[1];
            lngdir = match[8];
          } else if (match[7]) {
            latdir = match[7];
            lngdir = match[14];
          }
        } else {
          throw new Error("invalid DMS coordinates format");
        }
      } else if (dms_abbr.test(coordsString)) {
        match = dms_abbr.exec(coordsString);
        matchSuccess = checkMatch(match);
        if (matchSuccess) {
          ddLat = Math.abs(parseInt(match[2]));
          if (match[4]) {
            ddLat += match[4] / 60;
            if (!match[3])
              match[3] = " ";
          }
          if (match[6]) {
            ddLat += match[6] / 3600;
            if (!match[5])
              match[5] = " ";
          }
          if (parseInt(match[2]) < 0)
            ddLat = -1 * ddLat;
          ddLng = Math.abs(parseInt(match[10]));
          if (match[12]) {
            ddLng += match[12] / 60;
            if (!match[11])
              match[11] = " ";
          }
          if (match[14]) {
            ddLng += match[14] / 3600;
            if (!match[13])
              match[13] = " ";
          }
          if (parseInt(match[10]) < 0)
            ddLng = -1 * ddLng;
          if (match[1]) {
            latdir = match[1];
            lngdir = match[9];
          } else if (match[8]) {
            latdir = match[8];
            lngdir = match[16];
          }
        } else {
          throw new Error("invalid DMS coordinates format");
        }
      } else if (coords_other.test(coordsString)) {
        match = coords_other.exec(coordsString);
        matchSuccess = checkMatch(match);
        if (matchSuccess) {
          ddLat = Math.abs(parseInt(match[2]));
          if (match[4]) {
            ddLat += match[4] / 60;
            if (!match[3])
              match[3] = " ";
          }
          if (match[6]) {
            ddLat += match[6] / 3600;
            if (!match[5])
              match[5] = " ";
          }
          if (parseInt(match[2]) < 0)
            ddLat = -1 * ddLat;
          ddLng = Math.abs(parseInt(match[10]));
          if (match[12]) {
            ddLng += match[12] / 60;
            if (!match[11])
              match[11] = " ";
          }
          if (match[14]) {
            ddLng += match[14] / 3600;
            if (!match[13])
              match[13] = " ";
          }
          if (parseInt(match[10]) < 0)
            ddLng = -1 * ddLng;
          if (match[1]) {
            latdir = match[1];
            lngdir = match[9];
          } else if (match[8]) {
            latdir = match[8];
            lngdir = match[16];
          }
        } else {
          throw new Error("invalid coordinates format");
        }
      }
      if (Math.abs(ddLng) >= 180) {
        throw new Error("invalid longitude value");
      }
      if (matchSuccess) {
        var patt = /S|SOUTH/i;
        if (patt.test(latdir)) {
          if (ddLat > 0)
            ddLat = -1 * ddLat;
        }
        patt = /W|WEST/i;
        if (patt.test(lngdir)) {
          if (ddLng > 0)
            ddLng = -1 * ddLng;
        }
        var verbatimCoordinates = match[0].trim();
        var verbatimLat;
        var verbatimLng;
        var sepChars = /[,/;\u0020]/g;
        var seps = verbatimCoordinates.match(sepChars);
        if (seps == null) {
          var middle = Math.floor(coordsString.length / 2);
          verbatimLat = verbatimCoordinates.substring(0, middle).trim();
          verbatimLng = verbatimCoordinates.substring(middle).trim();
        } else {
          var middle;
          if (seps.length % 2 == 1) {
            middle = Math.floor(seps.length / 2);
          } else {
            middle = seps.length / 2 - 1;
          }
          var splitIndex = 0;
          if (middle == 0) {
            splitIndex = verbatimCoordinates.indexOf(seps[0]);
            verbatimLat = verbatimCoordinates.substring(0, splitIndex).trim();
            verbatimLng = verbatimCoordinates.substring(splitIndex + 1).trim();
          } else {
            var currSepIndex = 0;
            var startSearchIndex = 0;
            while (currSepIndex <= middle) {
              splitIndex = verbatimCoordinates.indexOf(seps[currSepIndex], startSearchIndex);
              startSearchIndex = splitIndex + 1;
              currSepIndex++;
            }
            verbatimLat = verbatimCoordinates.substring(0, splitIndex).trim();
            verbatimLng = verbatimCoordinates.substring(splitIndex + 1).trim();
          }
        }
        if (isNaN(ddLat) && ddLat.includes(",")) {
          ddLat = ddLat.replace(",", ".");
        }
        ddLat = Number(Number(ddLat).toFixed(decimalPlaces));
        if (isNaN(ddLng) && ddLng.includes(",")) {
          ddLng = ddLng.replace(",", ".");
        }
        ddLng = Number(Number(ddLng).toFixed(decimalPlaces));
        return Object.freeze({
          verbatimCoordinates,
          verbatimLatitude: verbatimLat,
          verbatimLongitude: verbatimLng,
          decimalLatitude: ddLat,
          decimalLongitude: ddLng,
          decimalCoordinates: `${ddLat},${ddLng}`,
          closeEnough: coordsCloseEnough,
          toCoordinateFormat
        });
      } else {
        throw new Error("coordinates pattern match failed");
      }
    }
    function checkMatch(match) {
      if (!isNaN(match[0])) {
        return false;
      }
      var filteredMatch = match.filter((x) => x);
      filteredMatch.shift();
      if (filteredMatch.length % 2 > 0) {
        return false;
      }
      var numerictest = /^[-+]?(\d+|\d+\.\d*|\d*\.\d+)$/;
      var stringtest = /[A-Za-z]+/;
      var halflen = filteredMatch.length / 2;
      var result = true;
      for (var i = 0; i < halflen; i++) {
        if (numerictest.test(filteredMatch[i]) != numerictest.test(filteredMatch[i + halflen]) || stringtest.test(filteredMatch[i]) != stringtest.test(filteredMatch[i + halflen])) {
          result = false;
          break;
        }
      }
      return result;
    }
    function decimalsCloseEnough(dec1, dec2) {
      var originaldiff = Math.abs(dec1 - dec2);
      diff = Number(originaldiff.toFixed(6));
      if (diff <= 1e-5) {
        return true;
      } else {
        return false;
      }
    }
    function coordsCloseEnough(coordsToTest) {
      if (coordsToTest.includes(",")) {
        var coords = coordsToTest.split(",");
        if (Number(coords[0]) == NaN || Number(coords[1]) == NaN) {
          throw new Error("coords are not valid decimals");
        } else {
          return decimalsCloseEnough(this.decimalLatitude, Number(coords[0])) && decimalsCloseEnough(this.decimalLongitude, coords[1]);
        }
      } else {
        throw new Error("coords being tested must be separated by a comma");
      }
    }
    var dd_re = /(NORTH|SOUTH|[NS])?[\s]*([+-]?[0-8]?[0-9](?:[\.,]\d{3,}))([•º°]?)[\s]*(NORTH|SOUTH|[NS])?[\s]*[,/;]?[\s]*(EAST|WEST|[EW])?[\s]*([+-]?[0-1]?[0-9]?[0-9](?:[\.,]\d{3,}))([•º°]?)[\s]*(EAST|WEST|[EW])?/i;
    var dms_periods = /(NORTH|SOUTH|[NS])?[\ \t]*([+-]?[0-8]?[0-9])[\ \t]*(\.)[\ \t]*([0-5]?[0-9])[\ \t]*(\.)?[\ \t]*((?:[0-5]?[0-9])(?:\.\d{1,3})?)?(NORTH|SOUTH|[NS])?(?:[\ \t]*[,/;][\ \t]*|[\ \t]*)(EAST|WEST|[EW])?[\ \t]*([+-]?[0-1]?[0-9]?[0-9])[\ \t]*(\.)[\ \t]*([0-5]?[0-9])[\ \t]*(\.)?[\ \t]*((?:[0-5]?[0-9])(?:\.\d{1,3})?)?(EAST|WEST|[EW])?/i;
    var dms_abbr = /(NORTH|SOUTH|[NS])?[\ \t]*([+-]?[0-8]?[0-9])[\ \t]*(D(?:EG)?(?:REES)?)[\ \t]*([0-5]?[0-9])[\ \t]*(M(?:IN)?(?:UTES)?)[\ \t]*((?:[0-5]?[0-9])(?:\.\d{1,3})?)?(S(?:EC)?(?:ONDS)?)?[\ \t]*(NORTH|SOUTH|[NS])?(?:[\ \t]*[,/;][\ \t]*|[\ \t]*)(EAST|WEST|[EW])?[\ \t]*([+-]?[0-1]?[0-9]?[0-9])[\ \t]*(D(?:EG)?(?:REES)?)[\ \t]*([0-5]?[0-9])[\ \t]*(M(?:IN)?(?:UTES)?)[\ \t]*((?:[0-5]?[0-9])(?:\.\d{1,3})?)?(S(?:EC)?(?:ONDS)?)[\ \t]*(EAST|WEST|[EW])?/i;
    var coords_other = /(NORTH|SOUTH|[NS])?[\ \t]*([+-]?[0-8]?[0-9])[\ \t]*([•º°\.:]|D(?:EG)?(?:REES)?)?[\ \t]*,?([0-5]?[0-9](?:\.\d{1,})?)?[\ \t]*(['′´’\.:]|M(?:IN)?(?:UTES)?)?[\ \t]*,?((?:[0-5]?[0-9])(?:\.\d{1,3})?)?[\ \t]*(''|′′|’’|´´|["″”\.])?[\ \t]*(NORTH|SOUTH|[NS])?(?:\s*[,/;]\s*|\s*)(EAST|WEST|[EW])?[\ \t]*([+-]?[0-1]?[0-9]?[0-9])[\ \t]*([•º°\.:]|D(?:EG)?(?:REES)?)?[\ \t]*,?([0-5]?[0-9](?:\.\d{1,})?)?[\ \t]*(['′´’\.:]|M(?:IN)?(?:UTES)?)?[\ \t]*,?((?:[0-5]?[0-9])(?:\.\d{1,3})?)?[\ \t]*(''|′′|´´|’’|["″”\.])?[\ \t]*(EAST|WEST|[EW])?/i;
    var to = Object.freeze({
      DMS: "DMS",
      DM: "DM"
    });
    converter.to = to;
    module.exports = converter;
  }
});

// node_modules/geo-coordinates-parser/testformats.js
var require_testformats = __commonJS({
  "node_modules/geo-coordinates-parser/testformats.js"(exports, module) {
    var coordsParserFormats = [
      {
        verbatimCoordinates: "40.123, -74.123",
        verbatimLatitude: "40.123",
        verbatimLongitude: "-74.123"
      },
      {
        verbatimCoordinates: "40.123\xB0 N 74.123\xB0 W",
        verbatimLatitude: "40.123\xB0 N",
        verbatimLongitude: "74.123\xB0 W"
      },
      {
        verbatimCoordinates: "40.123\xB0 N 74.123\xB0 W",
        verbatimLatitude: "40.123\xB0 N",
        verbatimLongitude: "74.123\xB0 W"
      },
      {
        verbatimCoordinates: '40\xB0 7\xB4 22.8" N 74\xB0 7\xB4 22.8" W',
        verbatimLatitude: '40\xB0 7\xB4 22.8" N',
        verbatimLongitude: '74\xB0 7\xB4 22.8" W'
      },
      {
        verbatimCoordinates: "40\xB0 7.38\u2019 , -74\xB0 7.38\u2019",
        verbatimLatitude: "40\xB0 7.38\u2019",
        verbatimLongitude: "-74\xB0 7.38\u2019"
      },
      {
        verbatimCoordinates: "N40\xB07\u201922.8\u2019\u2019, W74\xB07\u201922.8\u2019\u2019",
        verbatimLatitude: "N40\xB07\u201922.8\u2019\u2019",
        verbatimLongitude: "W74\xB07\u201922.8\u2019\u2019"
      },
      {
        verbatimCoordinates: '40\xB07\u201922.8"N, 74\xB07\u201922.8"W',
        verbatimLatitude: '40\xB07\u201922.8"N',
        verbatimLongitude: '74\xB07\u201922.8"W'
      },
      {
        verbatimCoordinates: `40\xB07'22.8"N, 74\xB07'22.8"W`,
        verbatimLatitude: `40\xB07'22.8"N`,
        verbatimLongitude: `74\xB07'22.8"W`
      },
      {
        verbatimCoordinates: "40 7 22.8, -74 7 22.8",
        verbatimLatitude: "40 7 22.8",
        verbatimLongitude: "-74 7 22.8"
      },
      {
        verbatimCoordinates: "40.123 -74.123",
        verbatimLatitude: "40.123",
        verbatimLongitude: "-74.123"
      },
      {
        verbatimCoordinates: "40.123\xB0,-74.123\xB0",
        verbatimLatitude: "40.123\xB0",
        verbatimLongitude: "-74.123\xB0"
      },
      {
        verbatimCoordinates: "40.123N74.123W",
        verbatimLatitude: "40.123N",
        verbatimLongitude: "74.123W"
      },
      {
        verbatimCoordinates: "4007.38N7407.38W",
        verbatimLatitude: "4007.38N",
        verbatimLongitude: "7407.38W"
      },
      {
        verbatimCoordinates: '40\xB07\u201922.8"N, 74\xB07\u201922.8"W',
        verbatimLatitude: '40\xB07\u201922.8"N',
        verbatimLongitude: '74\xB07\u201922.8"W'
      },
      {
        verbatimCoordinates: "400722.8N740722.8W",
        verbatimLatitude: "400722.8N",
        verbatimLongitude: "740722.8W"
      },
      {
        verbatimCoordinates: "N 40 7.38 W 74 7.38",
        verbatimLatitude: "N 40 7.38",
        verbatimLongitude: "W 74 7.38"
      },
      {
        verbatimCoordinates: "40:7:22.8N 74:7:22.8W",
        verbatimLatitude: "40:7:22.8N",
        verbatimLongitude: "74:7:22.8W"
      },
      {
        verbatimCoordinates: "40:7:23N,74:7:23W",
        verbatimLatitude: "40:7:23N",
        verbatimLongitude: "74:7:23W",
        decimalLatitude: 40.1230555555,
        decimalLongitude: -74.1230555555
      },
      {
        verbatimCoordinates: '40\xB07\u201923"N 74\xB07\u201923"W',
        verbatimLatitude: '40\xB07\u201923"N',
        verbatimLongitude: '74\xB07\u201923"W',
        decimalLatitude: 40.1230555555,
        decimalLongitude: -74.12305555555555
      },
      {
        verbatimCoordinates: '40\xB07\u201923" -74\xB07\u201923"',
        verbatimLatitude: '40\xB07\u201923"',
        verbatimLongitude: '-74\xB07\u201923"',
        decimalLatitude: 40.1230555555,
        decimalLongitude: -74.123055555
      },
      {
        verbatimCoordinates: '40d 7\u2019 23" N 74d 7\u2019 23" W',
        verbatimLatitude: '40d 7\u2019 23" N',
        verbatimLongitude: '74d 7\u2019 23" W',
        decimalLatitude: 40.1230555555,
        decimalLongitude: -74.123055555
      },
      {
        verbatimCoordinates: "40.123N 74.123W",
        verbatimLatitude: "40.123N",
        verbatimLongitude: "74.123W"
      },
      {
        verbatimCoordinates: "40\xB0 7.38, -74\xB0 7.38",
        verbatimLatitude: "40\xB0 7.38",
        verbatimLongitude: "-74\xB0 7.38"
      },
      {
        verbatimCoordinates: "40\xB0 7.38, -74\xB0 7.38",
        verbatimLatitude: "40\xB0 7.38",
        verbatimLongitude: "-74\xB0 7.38"
      },
      {
        verbatimCoordinates: "40 7 22.8; -74 7 22.8",
        verbatimLatitude: "40 7 22.8",
        verbatimLongitude: "-74 7 22.8"
      }
    ];
    var coordsParserDecimals = {
      decimalLatitude: 40.123,
      decimalLongitude: -74.123
    };
    var coordsRegexFormats = [
      {
        verbatimCoordinates: `50\xB04'17.698"south, 14\xB024'2.826"east`,
        verbatimLatitude: `50\xB04'17.698"south`,
        verbatimLongitude: `14\xB024'2.826"east`,
        decimalLatitude: -50.07158277777778,
        decimalLongitude: 14.400785
      },
      {
        verbatimCoordinates: "50d4m17.698S 14d24m2.826E",
        verbatimLatitude: "50d4m17.698S",
        verbatimLongitude: "14d24m2.826E",
        decimalLatitude: -50.07158277777778,
        decimalLongitude: 14.400785
      },
      {
        verbatimCoordinates: "40:26:46N,79:56:55W",
        verbatimLatitude: "40:26:46N",
        verbatimLongitude: "79:56:55W",
        decimalLatitude: 40.44611111111111,
        decimalLongitude: -79.9486111111111
      },
      {
        verbatimCoordinates: "40:26:46.302N 79:56:55.903W",
        verbatimLatitude: "40:26:46.302N",
        verbatimLongitude: "79:56:55.903W",
        decimalLatitude: 40.446195,
        decimalLongitude: -79.94886194444445
      },
      {
        verbatimCoordinates: "40\xB026\u203247\u2033N 79\xB058\u203236\u2033W",
        verbatimLatitude: "40\xB026\u203247\u2033N",
        verbatimLongitude: "79\xB058\u203236\u2033W",
        decimalLatitude: 40.44638888888889,
        decimalLongitude: -79.97666666666667
      },
      {
        verbatimCoordinates: "40d 26\u2032 47\u2033 N 79d 58\u2032 36\u2033 W",
        verbatimLatitude: "40d 26\u2032 47\u2033 N",
        verbatimLongitude: "79d 58\u2032 36\u2033 W",
        decimalLatitude: 40.44638888888889,
        decimalLongitude: -79.97666666666667
      },
      {
        verbatimCoordinates: "40.446195N 79.948862W",
        verbatimLatitude: "40.446195N",
        verbatimLongitude: "79.948862W",
        decimalLatitude: 40.446195,
        decimalLongitude: -79.948862
      },
      {
        verbatimCoordinates: "40,446195\xB0 79,948862\xB0",
        verbatimLatitude: "40,446195\xB0",
        verbatimLongitude: "79,948862\xB0",
        decimalLatitude: 40.446195,
        decimalLongitude: 79.948862
      },
      {
        verbatimCoordinates: "40\xB0 26.7717, -79\xB0 56.93172",
        verbatimLatitude: "40\xB0 26.7717",
        verbatimLongitude: "-79\xB0 56.93172",
        decimalLatitude: 40.446195,
        decimalLongitude: -79.948862
      },
      {
        verbatimCoordinates: "40.446195, -79.948862",
        verbatimLatitude: "40.446195",
        verbatimLongitude: "-79.948862",
        decimalLatitude: 40.446195,
        decimalLongitude: -79.948862
      },
      {
        verbatimCoordinates: "40.123256; -74.123256",
        verbatimLatitude: "40.123256",
        verbatimLongitude: "-74.123256",
        decimalLatitude: 40.123256,
        decimalLongitude: -74.123256
      }
    ];
    var otherFormats = [
      {
        verbatimCoordinates: "18.24S 22.45E",
        verbatimLatitude: "18.24S",
        verbatimLongitude: "22.45E",
        decimalLatitude: -18.4,
        decimalLongitude: 22.75
      },
      {
        verbatimCoordinates: "27deg 15min 45.2sec S 18deg 32min 53.7sec E",
        verbatimLatitude: "27deg 15min 45.2sec S",
        verbatimLongitude: "18deg 32min 53.7sec E",
        decimalLatitude: -27.262555555555554,
        decimalLongitude: 18.54825
      },
      {
        verbatimCoordinates: "-23.3245\xB0 S / 28.2344\xB0 E",
        verbatimLatitude: "-23.3245\xB0 S",
        verbatimLongitude: "28.2344\xB0 E",
        decimalLatitude: -23.3245,
        decimalLongitude: 28.2344
      },
      {
        verbatimCoordinates: "40\xB0 26.7717 -79\xB0 56.93172",
        verbatimLatitude: "40\xB0 26.7717",
        verbatimLongitude: "-79\xB0 56.93172",
        decimalLatitude: 40.446195,
        decimalLongitude: -79.948862
      },
      {
        verbatimCoordinates: "27.15.45S 18.32.53E",
        verbatimLatitude: "27.15.45S",
        verbatimLongitude: "18.32.53E",
        decimalLatitude: -27.2625,
        decimalLongitude: 18.548055
      },
      {
        verbatimCoordinates: "27,71372\xB0 S 23,07771\xB0 E",
        verbatimLatitude: "27,71372\xB0 S",
        verbatimLongitude: "23,07771\xB0 E",
        decimalLatitude: -27.71372,
        decimalLongitude: 23.07771
      }
    ];
    var userProvidedFormats = [
      {
        verbatimCoordinates: "N 52d0m0s E 000d0m0s",
        verbatimLatitude: "N 52d0m0s",
        verbatimLongitude: "E 000d0m0s",
        decimalLatitude: 52,
        decimalLongitude: 0
      },
      {
        verbatimCoordinates: "N49 0.000 E02 33.314",
        verbatimLatitude: "N49 0.000",
        verbatimLongitude: "E02 33.314",
        decimalLatitude: 49,
        decimalLongitude: 2.5552333333333332
      }
    ];
    function getAllTestFormats() {
      var arr1 = [];
      coordsParserFormats.forEach((item) => {
        if (item.decimalLatitude) {
          arr1.push(item);
        } else {
          arr1.push(__spreadValues(__spreadValues({}, item), coordsParserDecimals));
        }
      });
      return [...arr1, ...coordsRegexFormats, ...otherFormats, ...userProvidedFormats];
    }
    module.exports = getAllTestFormats();
  }
});

// node_modules/geo-coordinates-parser/merge.js
var require_merge = __commonJS({
  "node_modules/geo-coordinates-parser/merge.js"(exports, module) {
    var convert = require_converter();
    var formats = require_testformats().map((format) => format.verbatimCoordinates);
    convert.formats = formats;
    module.exports = convert;
  }
});

// dep:geo-coordinates-parser
var geo_coordinates_parser_default = require_merge();
export {
  geo_coordinates_parser_default as default
};
//# sourceMappingURL=geo-coordinates-parser.js.map
