{
  "version": 3,
  "sources": ["../ol-ext/util/ext.js", "../ol-ext/source/DayNight.js", "dep:ol-ext_source_DayNight"],
  "sourcesContent": ["/** @namespace  ol.ext\r\n */\r\n/*global ol*/\r\nif (window.ol && !ol.ext) {\r\n  ol.ext = {};\r\n}\r\n\r\n/** Inherit the prototype methods from one constructor into another.\r\n * replace deprecated ol method\r\n *\r\n * @param {!Function} childCtor Child constructor.\r\n * @param {!Function} parentCtor Parent constructor.\r\n * @function module:ol.inherits\r\n * @api\r\n */\r\nvar ol_ext_inherits = function(child,parent) {\r\n  child.prototype = Object.create(parent.prototype);\r\n  child.prototype.constructor = child;\r\n};\r\n\r\n// Compatibilty with ol > 5 to be removed when v6 is out\r\nif (window.ol) {\r\n  if (!ol.inherits) ol.inherits = ol_ext_inherits;\r\n}\r\n\r\n/* IE Polyfill */\r\n// NodeList.forEach\r\nif (window.NodeList && !NodeList.prototype.forEach) {\r\n  NodeList.prototype.forEach = Array.prototype.forEach;\r\n}\r\n// Element.remove\r\nif (window.Element && !Element.prototype.remove) {\r\n  Element.prototype.remove = function() {\r\n    if (this.parentNode) this.parentNode.removeChild(this);\r\n  }\r\n}\r\n/* End Polyfill */\r\n\r\nexport { ol_ext_inherits }\r\nexport default ol_ext_inherits\r\n", "/*\tCopyright (c) 2018 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n*/\r\n\r\nimport ol_ext_inherits from '../util/ext'\r\nimport ol_geom_Polygon from 'ol/geom/Polygon'\r\nimport ol_Feature from 'ol/Feature'\r\nimport ol_source_Vector from 'ol/source/Vector'\r\nimport {all as ol_loadingstrategy_all} from 'ol/loadingstrategy'\r\n\r\n/** DayNight source: a source to display day/night on a map\r\n * @constructor \r\n * @extends {ol.source.Vector}\r\n * @param {any} options Vector source options\r\n *  @param {string|Date} time source date time\r\n *  @param {number} step step in degree for coordinate precision\r\n */\r\nvar ol_source_DayNight = function(options) {\r\n  options = options || {};\r\n  options.loader = this._loader\r\n  options.strategy = ol_loadingstrategy_all;\r\n  ol_source_Vector.call (this, options);\r\n  this.set('time', options.time || new Date());\r\n  this.set('step', options.step || 1);\r\n};\r\nol_ext_inherits(ol_source_DayNight, ol_source_Vector);\r\n\r\n(function(){\r\n\r\n/** Loader\r\n * @private\r\n */\r\nol_source_DayNight.prototype._loader = function(extent, resolution, projection) {\r\n  var lonlat = this.getCoordinates(this.get('time'));\r\n  var geom = new ol_geom_Polygon([lonlat]);\r\n  geom.transform('EPSG:4326', projection);\r\n  this.addFeature(new ol_Feature(geom));\r\n};\r\n\r\n/** Set source date time\r\n * @param {string|Date} time source date time\r\n */\r\nol_source_DayNight.prototype.setTime = function(time) {\r\n  this.set('time', time);\r\n  this.refresh();\r\n};\r\n\r\n/** Compute the position of the Sun in ecliptic coordinates at julianDay.\r\n * @see http://en.wikipedia.org/wiki/Position_of_the_Sun \r\n * @param {number} julianDay\r\n * @private\r\n */\r\nfunction _sunEclipticPosition(julianDay) {\r\n  var deg2rad = Math.PI / 180;\r\n  // Days since start of J2000.0\r\n  var n = julianDay - 2451545.0;\r\n  // mean longitude of the Sun\r\n  var L = 280.460 + 0.9856474 * n;\r\n  L %= 360;\r\n  // mean anomaly of the Sun\r\n  var g = 357.528 + 0.9856003 * n;\r\n  g %= 360;\r\n  // ecliptic longitude of Sun\r\n  var lambda = L + 1.915 * Math.sin(g * deg2rad) +\r\n    0.02 * Math.sin(2 * g * deg2rad);\r\n  // distance from Sun in AU\r\n  var R = 1.00014 - 0.01671 * Math.cos(g * deg2rad) -\r\n    0.0014 * Math.cos(2 * g * deg2rad);\r\n  return { lambda: lambda, R: R };\r\n}\r\n\r\n/** \r\n * @see http://en.wikipedia.org/wiki/Axial_tilt#Obliquity_of_the_ecliptic_.28Earth.27s_axial_tilt.29\r\n * @param {number} julianDay\r\n * @private\r\n */\r\nfunction _eclipticObliquity(julianDay) {\r\n  var n = julianDay - 2451545.0;\r\n  // Julian centuries since J2000.0\r\n  var T = n / 36525;\r\n  var epsilon = 23.43929111 -\r\n    T * (46.836769 / 3600\r\n      - T * (0.0001831 / 3600\r\n        + T * (0.00200340 / 3600\r\n          - T * (0.576e-6 / 3600\r\n            - T * 4.34e-8 / 3600))));\r\n  return epsilon;\r\n}\r\n\r\n/* Compute the Sun's equatorial position from its ecliptic position.\r\n * @param {number} sunEclLng sun lon in degrees\r\n * @param {number} eclObliq secliptic position in degrees\r\n * @return {number} position in degrees\r\n * @private\r\n */\r\nfunction _sunEquatorialPosition(sunEclLon, eclObliq) {\r\n  var rad2deg = 180 / Math.PI;\r\n  var deg2rad = Math.PI / 180;\r\n\r\n  var alpha = Math.atan(Math.cos(eclObliq * deg2rad)\r\n    * Math.tan(sunEclLon * deg2rad)) * rad2deg;\r\n  var delta = Math.asin(Math.sin(eclObliq * deg2rad)\r\n    * Math.sin(sunEclLon * deg2rad)) * rad2deg;\r\n\r\n  var lQuadrant = Math.floor(sunEclLon / 90) * 90;\r\n  var raQuadrant = Math.floor(alpha / 90) * 90;\r\n  alpha = alpha + (lQuadrant - raQuadrant);\r\n\r\n  return {alpha: alpha, delta: delta};\r\n}\r\n\r\n/** Get sun coordinates on earth\r\n * @param {string} time DateTime string, default yet\r\n * @returns {ol.coordinate} position in lonlat\r\n */\r\nol_source_DayNight.prototype.getSunPosition = function (time) {\r\n  var date = time ? new Date(time) : new Date();\r\n  \r\n  // Calculate the present UTC Julian Date. \r\n  // Function is valid after the beginning of the UNIX epoch 1970-01-01 and ignores leap seconds. \r\n  var julianDay = (date / 86400000) + 2440587.5;\r\n\r\n  // Calculate Greenwich Mean Sidereal Time (low precision equation).\r\n  // http://aa.usno.navy.mil/faq/docs/GAST.php \r\n  var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545.0)) % 24;\r\n\r\n  var sunEclPos = _sunEclipticPosition(julianDay);\r\n  var eclObliq = _eclipticObliquity(julianDay);\r\n  var sunEqPos = _sunEquatorialPosition(sunEclPos.lambda, eclObliq);\r\n\r\n  return [sunEqPos.alpha - gst * 15, sunEqPos.delta]\r\n};\r\n\r\n/** Get the day/night separation latitude\r\n * @param {number} lon\r\n * @param {Date} time\r\n * @returns {number}\r\n */\r\nol_source_DayNight.getNightLat = function (lon, time) {\r\n  var rad2deg = 180 / Math.PI;\r\n  var deg2rad = Math.PI / 180;\r\n\r\n  var date = time ? new Date(time) : new Date();\r\n  \r\n  // Calculate the present UTC Julian Date. \r\n  // Function is valid after the beginning of the UNIX epoch 1970-01-01 and ignores leap seconds. \r\n  var julianDay = (date / 86400000) + 2440587.5;\r\n\r\n  // Calculate Greenwich Mean Sidereal Time (low precision equation).\r\n  // http://aa.usno.navy.mil/faq/docs/GAST.php \r\n  var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545.0)) % 24;\r\n\r\n  var sunEclPos = _sunEclipticPosition(julianDay);\r\n  var eclObliq = _eclipticObliquity(julianDay);\r\n  var sunEqPos = _sunEquatorialPosition(sunEclPos.lambda, eclObliq);\r\n\r\n  // Hour angle (indegrees) of the sun for a longitude on Earth.\r\n  var ha = (gst * 15 + lon) - sunEqPos.alpha;\r\n  // Latitude     \r\n  var lat = Math.atan(-Math.cos(ha * deg2rad) /\r\n    Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;\r\n\r\n  return lat;\r\n};\r\n\r\n/** Get night-day separation line\r\n * @param {string} time DateTime string, default yet\r\n * @param {string} options use 'line' to get the separation line, 'day' to get the day polygon, 'night' to get the night polygon or 'daynight' to get both polygon, default 'night'\r\n * @return {Array<ol.Point>|Array<Array<ol.Point>>}\r\n */\r\nol_source_DayNight.prototype.getCoordinates = function (time, options) {\r\n  var rad2deg = 180 / Math.PI;\r\n  var deg2rad = Math.PI / 180;\r\n\r\n  var date = time ? new Date(time) : new Date();\r\n  \r\n  // Calculate the present UTC Julian Date. \r\n  // Function is valid after the beginning of the UNIX epoch 1970-01-01 and ignores leap seconds. \r\n  var julianDay = (date / 86400000) + 2440587.5;\r\n\r\n  // Calculate Greenwich Mean Sidereal Time (low precision equation).\r\n  // http://aa.usno.navy.mil/faq/docs/GAST.php \r\n  var gst = (18.697374558 + 24.06570982441908 * (julianDay - 2451545.0)) % 24;\r\n  var lonlat = [];\r\n\r\n  var sunEclPos = _sunEclipticPosition(julianDay);\r\n  var eclObliq = _eclipticObliquity(julianDay);\r\n  var sunEqPos = _sunEquatorialPosition(sunEclPos.lambda, eclObliq);\r\n\r\n  var step = this.get('step') || 1;\r\n  for (var i = -180; i <= 180; i += step) {\r\n    var lon = i;\r\n    // Hour angle (indegrees) of the sun for a longitude on Earth.\r\n    var ha = (gst * 15 + lon) - sunEqPos.alpha;\r\n    // Latitude     \r\n    var lat = Math.atan(-Math.cos(ha * deg2rad) /\r\n      Math.tan(sunEqPos.delta * deg2rad)) * rad2deg;\r\n    // New point\r\n    lonlat.push([lon, lat]);\r\n  }\r\n  switch (options) {\r\n    case 'line': break;\r\n    case 'day': sunEqPos.delta *= -1;\r\n    // fallthrough\r\n    default: {\r\n      // Close polygon\r\n      lat = (sunEqPos.delta < 0) ? 90 : -90;\r\n      for(var tlon=180; tlon>=-180; tlon-=step){\r\n        lonlat.push([tlon,lat]);\r\n      }\r\n      lonlat.push(lonlat[0])\r\n      break;\r\n    }\r\n  }\r\n  // Return night + day polygon\r\n  if (options === 'daynight') {\r\n    var day = [];\r\n    lonlat.forEach(function (t) { day.push(t.slice()); });\r\n    day[0][1] = -day[0][1];\r\n    day[day.length-1][1] = -day[0][1];\r\n    day[day.length-1][1] = -day[0][1];\r\n    lonlat = [ lonlat, day ];\r\n  }\r\n  // Return polygon\r\n  return lonlat;\r\n};\r\n\r\n})();\r\n\r\nexport default ol_source_DayNight\r\n", "import d from \"./node_modules/ol-ext/source/DayNight.js\";export default d;"],
  "mappings": "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",
  "names": []
}
